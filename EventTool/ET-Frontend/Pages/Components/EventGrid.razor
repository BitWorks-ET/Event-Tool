@using ET_Frontend.Services.ApiClients

@inject NavigationManager Navigation
@inject IEventApi EventApi
@inject ISnackbar Snackbar

<MudText Typo="Typo.h5" Class="mb-2">@Title</MudText>

<MudDataGrid T="EventViewModel" Items="@Events" Dense="true" Class="mb-6">
	<Columns>
		<PropertyColumn Property="x => x.Name" Title="Name" />
		<PropertyColumn Property="x => x.Description" Title="Beschreibung" />
		<PropertyColumn Property="x => x.Participants" Title="Teilnehmer" />
		<PropertyColumn Property="x => x.MaxParticipants" Title="Maximale Teilnehmer" />
		<PropertyColumn Property="e => e.StatusDisplay" Title="Status" SortBy="e => e.StatusDisplay" />
		<TemplateColumn CellClass="d-flex justify-end">
			<CellTemplate Context="eventItem">
				<MudStack Row Spacing="1">

					@if (eventItem.Item.IsOrganizer || IsOwner)
					{
						<MudButton Size="Size.Small"
						           Variant="Variant.Outlined"
						           Color="Color.Secondary"
						           OnClick="@(() => NavigateToEventEdit(eventItem.Item.Id))">
							Bearbeiten
						</MudButton>
					}
					
					@if (eventItem.Item.IsOrganizer || IsOwner)
					{
						<MudButton Size="Size.Small"
						           Variant="Variant.Filled"
						           Color="Color.Secondary"
						           OnClick="@(() => AskDelete(eventItem.Item))">
							Löschen
						</MudButton>
					}

					@if (eventItem.Item.CanSubscribe)
					{
						<MudButton Size="Size.Small"
						           Variant="Variant.Filled"
						           Color="@(eventItem.Item.IsSubscribed ? Color.Error : Color.Success)"
						           OnClick="@(() => OnSubscribeToggle.InvokeAsync(eventItem.Item))">
							@(eventItem.Item.IsSubscribed ? "Abmelden" : "Anmelden")
						</MudButton>
					}

					<MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
					           OnClick="@(() => NavigateToEventDetails(eventItem.Item.Id))">
						Details
					</MudButton>

				</MudStack>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
</MudDataGrid>

<!-- simple confirm -->
<SimpleConfirm @bind-IsOpen="_showDelete"
			   Message="Event wirklich löschen? Dies kann nicht rückgängig gemacht werden."
			   ConfirmText="Löschen"
			   OnConfirm="DeleteConfirmed" />

@code {
	[Parameter] public List<EventViewModel>          Events            { get; set; } = new();
	[Parameter] public string                        Title             { get; set; } = "";
	[Parameter] public bool                          IsOwner           { get; set; }
	[Parameter] public EventCallback<EventViewModel> OnSubscribeToggle { get; set; }

	private EventViewModel _toDelete;
	private bool           _showDelete;

    private void NavigateToEventDetails(int eventId)
        => Navigation.NavigateTo($"/EventDetails/{eventId}");

    private void NavigateToEventEdit(int eventId)
        => Navigation.NavigateTo($"/EventErstellen/{eventId}");

    private void AskDelete(EventViewModel ev)
    {
	    _toDelete   = ev;
	    _showDelete = true;
    }

    private async Task DeleteConfirmed(bool ok)
    {
	    if (!ok || _toDelete == null) return;

	    var success = await EventApi.DeleteEventAsync(_toDelete.Id);
	    if (success)
	    {
		    Events.Remove(_toDelete);
		    Snackbar.Add("Event gelöscht.", Severity.Success);
		    StateHasChanged();
	    }
	    else
		    Snackbar.Add("Event konnte nicht gelöscht werden.", Severity.Error);

	    _showDelete = false;
	    _toDelete   = null;
    }
}