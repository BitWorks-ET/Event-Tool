@namespace ET_Frontend.Components
@using ET_Frontend.Models
@using ET.Shared.DTOs.Enums
@inject Services.ApiClients.IProcessAPI ProcessApi
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Class="mb-4">Prozess</MudText>
<MudText Typo="Typo.body1" Class="mb-4">
    Definieren Sie hier automatische Aktionen für Ihr Event.
</MudText>

<MudSpacer />

<MudDataGrid T="ProcessStepViewModel" Items="@_steps" Dense="true">
    <Columns>
	    <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate Context="row">
	            <MudStack Row Spacing="5">
					
		            <!-- Step-Bezeichnung ----------------------------------------- -->
					<MudTextField @bind-Value="row.Item.Name" HelperText="Bezeichnung" />

		            <!-- Action ----------------------------------------- -->
		            <MudSelect @bind-Value="row.Item.Action" FitContent="true" HelperText="Aktion">
			            <MudSelectItem Value="ProcessStepAction.SendEmail">Versendet eine Email</MudSelectItem>
			            <MudSelectItem Value="ProcessStepAction.OpenEvent">Statusänderung zu Offen</MudSelectItem>
			            <MudSelectItem Value="ProcessStepAction.CloseEvent">Statusänderung zu Geschlossen</MudSelectItem>
			            <MudSelectItem Value="ProcessStepAction.CancelEvent">Statusänderung zu Abgesagt</MudSelectItem>
		            </MudSelect>

		            <!-- Trigger ----------------------------------------- -->
		            <MudSelect @bind-Value="row.Item.Trigger" FitContent="true" HelperText="Auslöser">
			            <MudSelectItem Value="ProcessStepTrigger.MinParticipantsReached">Min. Teilnehmer erreicht</MudSelectItem>
			            <MudSelectItem Value="ProcessStepTrigger.MaxParticipantsReached">Max. Teilnehmer erreicht</MudSelectItem>
			            <MudSelectItem Value="ProcessStepTrigger.StatusChanged">Status geändert</MudSelectItem>
			            <MudSelectItem Value="ProcessStepTrigger.ParticipantRegisters">Neue Anmeldung</MudSelectItem>
			            <MudSelectItem Value="ProcessStepTrigger.OpenSubscription">Anmeldestart</MudSelectItem>
			            <MudSelectItem Value="ProcessStepTrigger.CloseSubscription">Anmeldeschluss</MudSelectItem>
		            </MudSelect>

		            <!-- Offset ------------------------------------------- -->
		            <MudNumericField T="int"
		                             HelperText="Offset"
		                             Style="width: 90px"
		                             @bind-Value="row.Item.Offset"/>
					
		            <!-- Verkettung ------------------------- -->
		            <MudSelect T="int"
		                       @bind-Value="row.Item.TriggeredByStepId"
		                       HelperText="Optional, um Schritte zu verketten">
			            <MudSelectItem Value="0">(Kein vorheriger Schritt)</MudSelectItem>
			            @foreach (var s in _steps.Where(s => s != row.Item))
			            {
				            <MudSelectItem Value="@s.Id">@s.Name</MudSelectItem>
			            }
		            </MudSelect>

		            <!-- Löschen ------------------------------------------ -->
		            <MudButton Size="Size.Small"
		                       Variant="Variant.Filled"
		                       Color="Color.Error"
		                       OnClick="@(() => DeleteStep(row.Item))">
			            Löschen
		            </MudButton>

	            </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudStack Row Justify="Justify.FlexEnd" Class="mt-6">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateNewProcessStep">
        Neuer Schritt
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="DiscardChanges">
        Änderungen verwerfen
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveProcess">
        Speichern
    </MudButton>
</MudStack>

@code
{
    [Parameter] public int EventId { get; set; }

	private List<ProcessStepViewModel> _steps = [];
	private int _tempStepId = -1;


	protected override async Task OnInitializedAsync()
	{
		_steps = (await ProcessApi.GetAsync(EventId))?.ProcessSteps ?? [];
	}

	public ProcessViewModel GetCurrentProcess()
		=> new() { Id = EventId, EventId = EventId, ProcessSteps = _steps };

	private void CreateNewProcessStep()
	{
		_steps.Add(new ProcessStepViewModel
		{
			Id                = _tempStepId--, // temporäre negative ID
			Name              = "Neuer Schritt",
			Action            = ProcessStepAction.SendEmail,
			Trigger           = ProcessStepTrigger.OpenSubscription,
			Offset            = 0,
			TriggeredByStepId = 0
		});
	}

    private void DeleteStep(ProcessStepViewModel step)
        => _steps.Remove(step);

    private async Task SaveProcess()
    {
	    var ok = await ProcessApi.UpdateAsync(EventId, new ProcessViewModel
	    {
		    Id           = EventId,
		    EventId      = EventId,
		    ProcessSteps = _steps
	    });

	    Snackbar.Add(ok ? "Prozess gespeichert!" : "Fehler beim Speichern.",
		    ok ? Severity.Success       : Severity.Error);
    }

    private async Task DiscardChanges()
    {
	    _steps = (await ProcessApi.GetAsync(EventId))?.ProcessSteps ?? [];
    }
}