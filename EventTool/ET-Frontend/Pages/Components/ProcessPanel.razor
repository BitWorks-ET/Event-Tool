@namespace ET_Frontend.Components
@using ET_Frontend.Models
@using ET_Frontend.Models.Enums
@inject IDialogService DialogService
@inject Services.ApiClients.IProcessAPI ProcessApi
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" Class="mb-4">Prozess</MudText>
<MudText Typo="Typo.body1" Class="mb-4">
    Definieren Sie hier automatische Aktionen für Ihr Event.
</MudText>

<MudSpacer />

<MudDataGrid T="ProcessStepViewModel" Items="@_steps" Dense="true">
    <Columns>
        <PropertyColumn Property="x => x.TypeName" Title="Prozess-Schritt" />

        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate Context="row">
                <MudStack Row Spacing="5">

                    <!-- Trigger ----------------------------------------- -->
                    <MudSelect @bind-Value="row.Item.Trigger" FitContent="true" HelperText="Auslöser">
                        <MudSelectItem Value="ProcessStepTrigger.MinParticipantsReached">Min. Teilnehmer erreicht</MudSelectItem>
                        <MudSelectItem Value="ProcessStepTrigger.MaxParticipantsReached">Max. Teilnehmer erreicht</MudSelectItem>
                        <MudSelectItem Value="ProcessStepTrigger.StatusChanged">Status geändert</MudSelectItem>
                        <MudSelectItem Value="ProcessStepTrigger.ParticipantRegisters">Neue Anmeldung</MudSelectItem>
                        <MudSelectItem Value="ProcessStepTrigger.StartOfEventLogins">Anmeldestart</MudSelectItem>
                        <MudSelectItem Value="ProcessStepTrigger.EndOfEventLogins">Anmeldeschluss</MudSelectItem>
                    </MudSelect>

                    <!-- Condition ---------------------------------------- -->
                    <MudSelect @bind-Value="row.Item.Condition" FitContent="true" HelperText="Bedingung">
                        <MudSelectItem Value="ProcessStepCondition.ParticipantsOverMin">Anmeldungen > Minimum</MudSelectItem>
                        <MudSelectItem Value="ProcessStepCondition.none">Keine Bedingung</MudSelectItem>
                    </MudSelect>

                    <!-- Offset ------------------------------------------- -->
                    <MudNumericField T="int"
                                     HelperText="Verzögerung (h)"
                                     Style="width:90px"
                                     @bind-Value="row.Item.OffsetInHours" />

                    <!-- Bearbeiten (Dialog je nach Step-Type) ------------- -->
                    <MudButton Size="Size.Small"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="@(() => ConfigureStepAsync(row.Item))">
                        Details
                    </MudButton>

                    <!-- Löschen ------------------------------------------ -->
                    <MudButton Size="Size.Small"
                               Variant="Variant.Filled"
                               Color="Color.Error"
                               OnClick="@(() => DeleteStep(row.Item))">
                        Löschen
                    </MudButton>

                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<MudStack Row Justify="Justify.FlexEnd" Class="mt-6">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddStep">
        Neuer Schritt
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="DiscardChanges">
        Änderungen verwerfen
    </MudButton>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveProcessAsync">
        Speichern
    </MudButton>
</MudStack>

@code
{
    /* -------------------------------------------------------------
       Parameter & Felder
    ------------------------------------------------------------- */
    [Parameter] public int EventId { get; set; }

    private List<ProcessStepViewModel> _steps = new();

    /* -------------------------------------------------------------
       Lifecycle – Prozessschritte beim Öffnen laden
    ------------------------------------------------------------- */
    protected override async Task OnParametersSetAsync()
    {
        if (EventId > 0)
            _steps = (await ProcessApi.GetAsync(EventId)).ProcessSteps ?? new();
        else
            _steps = new();  // neues Event → leere Liste
    }

    /* -------------------------------------------------------------
       Public API für EventErstellen.razor
       (wird von dort nach dem Speichern des Events aufgerufen)
    ------------------------------------------------------------- */
    public ProcessViewModel GetCurrentProcess()
        => new(EventId, _steps);

    /* -------------------------------------------------------------
       CRUD-Aktionen
    ------------------------------------------------------------- */

    private void AddStep()
    {
        _steps.Add(new ProcessStepViewModel
        {
            TypeName = "E-Mail senden",
            Type = ProcessStepType.SendEMail,
            Trigger = ProcessStepTrigger.StatusChanged,
            Condition = ProcessStepCondition.none,
            OffsetInHours = 0
        });
    }

    private void DeleteStep(ProcessStepViewModel step)
        => _steps.Remove(step);

    private async Task SaveProcessAsync()
    {
        if (EventId == 0)
        {
            Snackbar.Add("Event muss zuerst gespeichert werden.", Severity.Warning);
            return;
        }

        var ok = await ProcessApi.UpdateAsync(EventId, GetCurrentProcess());

        Snackbar.Add(ok ? "Prozess gespeichert!" : "Fehler beim Speichern.",
                     ok ? Severity.Success : Severity.Error);
    }

    private async Task DiscardChanges()
    {
        if (EventId > 0)
            _steps = (await ProcessApi.GetAsync(EventId)).ProcessSteps ?? new();
        else
            _steps.Clear();
    }

    /* -------------------------------------------------------------
   Detail-Dialog (E-Mail oder Status­wechsel)
------------------------------------------------------------- */
    private Task ConfigureStepAsync(ProcessStepViewModel step)
    {
	    var parameters = new DialogParameters { ["Step"] = step };
	    var options    = new DialogOptions   { CloseOnEscapeKey = true };

	    return step.Type switch
	    {
		    ProcessStepType.SendEMail    => DialogService.ShowAsync<EMailDialog>     ("E-Mail Schritt",  parameters, options),
		    ProcessStepType.ChangeStatus => DialogService.ShowAsync<ChangeStateDialog>("Status-Schritt", parameters, options),
		    _                            => Task.CompletedTask
	    };
    }
}