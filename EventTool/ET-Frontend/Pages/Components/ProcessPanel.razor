@namespace ET_Frontend.Components
@using ET_Frontend.Models
@using ET_Frontend.Services.ApiClients
@using ET.Shared.DTOs.Enums
@using MudBlazor

@inject ISnackbar Snackbar
@inject IDialogService Dialogs
@inject IProcessApi ProcessApi


<MudText Typo="Typo.h4" Class="mb-4">Prozess</MudText>
<MudText Typo="Typo.body1" Class="mb-4">
    Definieren Sie hier automatische Aktionen für Ihr Event.
</MudText>

<MudSpacer />

<!-- ----------------------------- Grid -------------------------------- -->
<MudDataGrid T="ProcessStepViewModel"
             Items="@_steps"
             Dense="true">

    <Columns>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate Context="row">
                <MudStack Row Spacing="5">

                    <!-- Bezeichnung -->
                    <MudTextField @bind-Value="row.Item.Name"
                                  HelperText="Bezeichnung" />

                    <!-- Action -->
                    <MudSelect T="ProcessStepAction"
                               @bind-Value="row.Item.Action"
                               FitContent="true"
                               HelperText="Aktion">
                        <MudSelectItem Value="@ProcessStepAction.SendEmail">Email senden</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepAction.OpenEvent">Status → Offen</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepAction.CloseEvent">Status → Geschlossen</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepAction.CancelEvent">Status → Abgesagt</MudSelectItem>
                    </MudSelect>

                    <!-- Edit-Icon nur bei SendEmail -->
                    @if (row.Item.Action == ProcessStepAction.SendEmail)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                       Color="Color.Primary"
                                       Size="Size.Small"
                                       Title="E-Mail bearbeiten"
                                       OnClick="@(() => ConfigureEmail(row.Item))" />
                    }

                    <!-- Trigger -->
                    <MudSelect T="ProcessStepTrigger"
                               @bind-Value="row.Item.Trigger"
                               FitContent="true"
                               HelperText="Auslöser">
                        <MudSelectItem Value="@ProcessStepTrigger.MinParticipantsReached">Min. Teilnehmer erreicht</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepTrigger.MaxParticipantsReached">Max. Teilnehmer erreicht</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepTrigger.StatusChanged">Status geändert</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepTrigger.ParticipantRegisters">Neue Anmeldung</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepTrigger.OpenSubscription">Anmeldestart</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepTrigger.CloseSubscription">Anmeldeschluss</MudSelectItem>
                        <MudSelectItem Value="@ProcessStepTrigger.StepCompleted">Vorheriger Schritt erledigt</MudSelectItem>
                    </MudSelect>

                    <!-- Offset -->
                    <MudNumericField T="int"
                                     HelperText="Offset"
                                     Style="width: 90px"
                                     @bind-Value="row.Item.Offset" />

                    <!-- Verkettung -->
                    <MudSelect T="int?"
                               @bind-Value="row.Item.TriggeredByStepId"
                               HelperText="Schritt-Verkettung"
                               Disabled="@(row.Item.Trigger != ProcessStepTrigger.StepCompleted)">
                        <MudSelectItem Value="@(null as int?)">(Kein vorheriger Schritt)</MudSelectItem>
                        @foreach (var s in _steps.Where(s => s != row.Item))
                        {
                            <MudSelectItem Value="@((int?)s.Id)">@s.Name</MudSelectItem>
                        }
                    </MudSelect>

                    <!-- Löschen -->
                    <MudButton Size="Size.Small"
                               Variant="Variant.Filled"
                               Color="Color.Error"
                               OnClick="@(() => DeleteStep(row.Item))">
                        Löschen
                    </MudButton>

                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

<!-- --------------------------- Buttons ------------------------------- -->
<MudStack Row Justify="Justify.FlexEnd" Class="mt-6">
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               OnClick="CreateNewProcessStep">
        Neuer Schritt
    </MudButton>
    <MudButton Variant="Variant.Filled"
               Color="Color.Secondary"
               OnClick="DiscardChanges">
        Änderungen verwerfen
    </MudButton>
    <MudButton Variant="Variant.Filled"
               Disabled="@(EventId == 0)"
               Color="Color.Primary"
               OnClick="SaveProcess">
        Speichern
    </MudButton>
</MudStack>

@code {
    [Parameter] public int EventId { get; set; }

    private List<ProcessStepViewModel> _steps = [];
    private int _tempStepId = -1;
    private bool _processExists;                // merken, ob es schon einen Prozess gab

    /* --------------------------- Lifecycle ----------------------------- */
    protected override async Task OnInitializedAsync()
    {
	    if (EventId == 0)
	    {
		    _processExists = false;
		    _steps         = new();
		    return;
	    }
	    
	    try
        {
            var process = await ProcessApi.GetAsync(EventId);
            _processExists = process is not null;
            _steps = process?.ProcessSteps ?? new();
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
        {
            // Kein Prozess angelegt → einfach leer starten
            _processExists = false;
            _steps = new();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden des Prozesses: {ex.Message}", Severity.Error);
            _steps = new();
        }
    }

    /* --------------------------- Helpers ------------------------------- */
    private void CreateNewProcessStep() => _steps.Add(new()
    {
        Id = _tempStepId--,
        Name = "Neuer Schritt",
        Action = ProcessStepAction.SendEmail,
        Trigger = ProcessStepTrigger.OpenSubscription,
        Offset = 0,
        TriggeredByStepId = null
    });

    private void DeleteStep(ProcessStepViewModel s) => _steps.Remove(s);

    private async Task SaveProcess()
    {
	    if (EventId == 0)   // Event noch nicht angelegt!
	    {
		    Snackbar.Add("Speichere zuerst das Event (Details-Tab).", Severity.Info);
		    return;
	    }

	    var vm = new ProcessViewModel
	    {
		    Id           = _processExists ? EventId : 0,
		    EventId      = EventId,
		    ProcessSteps = _steps
	    };

	    bool ok = _processExists
		    ? await ProcessApi.UpdateAsync(EventId, vm)
		    : await ProcessApi.CreateAsync(EventId, vm);

	    if (ok)
	    {
		    _processExists = true;
		    await DiscardChanges();               // echte IDs nachladen
	    }

	    Snackbar.Add(ok ? "Prozess gespeichert!" : "Fehler beim Speichern.",
		    ok ? Severity.Success       : Severity.Error);
    }


    /* --------------------------------------------------------------------
   Liefert den aktuellen Panel-Zustand an den Parent zurück.
   Wird z. B. in EventErstellen.razor von SaveEvent() verwendet.
-------------------------------------------------------------------- */
    public ProcessViewModel GetCurrentProcess()
    {
	    return new ProcessViewModel
	    {
		    Id           = _processExists ? EventId : 0,
		    EventId      = EventId,
		    ProcessSteps = _steps
	    };
    }

    private async Task DiscardChanges()
    {
        await OnInitializedAsync();
        StateHasChanged();
    }

    /* --------------- E-Mail-Dialog ---------------- */
    private async Task ConfigureEmail(ProcessStepViewModel step)
    {
        var dlg = Dialogs.Show<EMailDialog>("E-Mail bearbeiten",
            new DialogParameters
            {
                ["InitSubject"] = step.Subject,
                ["InitBody"] = step.Body
            });

        var res = await dlg.Result;
        if (!res.Canceled)
        {
            var (subj, body) = ((string?, string?))res.Data!;
            step.Subject = subj;
            step.Body = body;
        }
    }
}