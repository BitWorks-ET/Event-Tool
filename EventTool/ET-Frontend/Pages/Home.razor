@page "/home"

@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using System.Text.Json
@using ET.Shared.DTOs
@using ET_Frontend.Models
@using Blazored.SessionStorage
@using ET_Frontend.Helpers
@using ET_Frontend.Mapping
@using ET_Frontend.Pages.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Threading


@inject HttpClient Http
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject Services.ApiClients.IEventApi EventApi
@inject ISnackbar Snackbar

<PageTitle>Home</PageTitle>

<div class="flex-md-column align-content-between justify-content-center w-100 h-100">
    <MudPaper Width="100%">
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6 h-100">

            <!-- Events Tab -->
            <MudTabPanel Text="Events">
                <MudText Typo="Typo.h4" Class="mb-3">Events</MudText>

                <!-- Filterleiste -->
                <div class="d-flex align-items-center flex-wrap gap-3 mb-4">

                    <MudTextField T="string"
                                  @bind-Value="_eventTitleFilter"
                                  Placeholder="Eventtitel suchen..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  Dense="true"
                                  Style="min-width: 200px;" />

                    <MudSelect T="string"
                               @bind-Value="_selectedStatus"
                               Placeholder="Status"
                               Style="min-width: 150px;"
                               Dense="true"
                               Clearable="true"
                               DisableUnderline="true">
                        @foreach (var status in _statusOptions)
                        {
                            <MudSelectItem Value="@status">@status</MudSelectItem>
                        }
                    </MudSelect>

                    <MudCheckBox T="bool"
                                 Label="Kann bearbeiten"
                                 @bind-Value="_onlyEditable"
                                 Class="mt-1" />

                    <MudButton OnClick="ApplyEventFilter"
                               Color="Color.Primary"
                               Variant="Variant.Filled"
                               Class="mt-1">
                        Suchen
                    </MudButton>

                </div>

                @if (FilteredEvents.Any())
                {
                    <MudGrid Gutter="Size.Medium">
                        @foreach (var ev in FilteredEvents)
                        {
                            <MudItem xs="12" sm="6" md="4" lg="3">
                                <MudCard Class="pa-4 mb-4 d-flex flex-column" Style="height: 100%;">
                                    <MudCardContent>
                                        <div class="d-flex justify-between align-center mb-1">
                                            <MudText Typo="Typo.h6">@ev.Name?.Substring(0, Math.Min(30, ev.Name.Length))</MudText>
                                            <MudChip T="object"
                                                     Variant="Variant.Filled"
                                                     Color="@GetStatusColor(ev.StatusDisplay)">
                                                @ev.StatusDisplay
                                            </MudChip>
                                        </div>

                                        <MudText Typo="Typo.body2" Class="mb-2">@ev.Description</MudText>

                                        <MudText Typo="Typo.caption" Class="mb-1">
                                            <MudIcon Icon="@Icons.Material.Filled.Group" Class="me-1" />
                                            Teilnehmer: @ev.Participants / @ev.MaxParticipants
                                        </MudText>

                                    </MudCardContent>

                                    <MudCardActions Class="mt-auto d-flex flex-column gap-2">
                                        <MudButton Variant="Variant.Filled"
                                                   Color="@(ev.IsSubscribed ? Color.Error : Color.Success)"
                                                   Disabled="@(ev.CanSubscribe == false)"
                                                   OnClick="@(() => ToggleSubscription(ev))"
                                                   FullWidth="true">
                                            @(ev.IsSubscribed ? "ABMELDEN" : "ANMELDEN")
                                        </MudButton>

                                        <div class="d-flex justify-between gap-1 w-100">
                                            @if (ev.IsManagedByMe || IsOwner)
                                            {
                                                <MudButton Variant="Variant.Outlined"
                                                           Color="Color.Info"
                                                           Size="Size.Small"
                                                           StartIcon="@Icons.Material.Filled.Edit"
                                                           OnClick="@(() => NavigateToEventEdit(ev.Id))"
                                                           Class="flex-fill">
                                                    Bearbeiten
                                                </MudButton>

                                                <MudButton Variant="Variant.Outlined"
                                                           Color="Color.Error"
                                                           Size="Size.Small"
                                                           StartIcon="@Icons.Material.Filled.Delete"
                                                           OnClick="@(() => AskDelete(ev))"
                                                           Class="flex-fill">
                                                    Löschen
                                                </MudButton>
                                            }

                                            <MudButton Variant="Variant.Outlined"
                                                       Color="Color.Secondary"
                                                       Size="Size.Small"
                                                       StartIcon="@Icons.Material.Filled.Info"
                                                       OnClick="@(() => NavigateToEventDetails(ev.Id))"
                                                       Class="flex-fill">
                                                Details
                                            </MudButton>
                                        </div>
                                    </MudCardActions>

                                </MudCard>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <MudText>Keine Events gefunden.</MudText>
                }

                @if (CanCreateEvents)
                {
                    <MudButton Class="float-end mt-4"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="NavigateToEventCreation">
                        Event erstellen
                    </MudButton>
                }
            </MudTabPanel>

            <!-- Organisation Tab -->
            @if (IsOwner)
            {
                <MudTabPanel Text="Organisation">
                    <MudText Typo="Typo.h4" Class="mb-3">Mitglieder</MudText>
                    <MudDataGrid T="OrganizationMemberViewModel" Items="@OrgMembers" Dense="true">
                        <Columns>
                            <PropertyColumn Property="x => x.LastName" Title="Nachname" />
                            <PropertyColumn Property="x => x.Email" Title="E-Mail" />
                            <TemplateColumn Title="Rolle">
                                <CellTemplate Context="ctx">
                                    <MudSelect T="int" Dense="true" Value="ctx.Item.Role" ValueChanged="@((int r) => PrepareRoleChange(ctx.Item, r))">
                                        <MudSelectItem Value="0">Owner</MudSelectItem>
                                        <MudSelectItem Value="1">Organisator</MudSelectItem>
                                        <MudSelectItem Value="2">Mitglied</MudSelectItem>
                                    </MudSelect>
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn Title="" CellClass="text-end">
                                <CellTemplate Context="ctx">
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveMember(ctx.Item))">
                                        Entfernen
                                    </MudButton>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                    <MudButton Class="float-end mt-4" OnClick="ChangeOrgaData" Variant="Variant.Filled" Color="Color.Primary">Organisationsdaten ändern</MudButton>

                    <SimpleConfirm @bind-IsOpen="ShowConfirmDialog"
                                   Message="Das Mitglied wird dauerhaft aus der Organisation entfernt. Möchten Sie fortfahren?"
                                   ConfirmText="Löschen"
                                   OnConfirm="HandleDeleteConfirm" />
                    <SimpleConfirm @bind-IsOpen="ShowRoleConfirmDialog"
                                   Message="Möchten Sie die Rolle dieses Mitglieds wirklich ändern?"
                                   ConfirmText="Ändern"
                                   OnConfirm="HandleRoleConfirm" />
                </MudTabPanel>
            }
        </MudTabs>
    </MudPaper>
</div>

<SimpleConfirm @bind-IsOpen="_showDelete"
               Message="Event wirklich löschen? Dies kann nicht rückgängig gemacht werden."
               ConfirmText="Löschen"
               OnConfirm="DeleteConfirmed" />

@code {
    private List<EventViewModel> Events = new();
    private List<EventViewModel> FilteredEvents = new();
    private List<OrganizationMemberViewModel> OrgMembers = new();

    private EventViewModel _toDelete;
    private bool _showDelete;
    private bool ShowConfirmDialog = false;
    private bool ShowRoleConfirmDialog = false;

    private OrganizationMemberViewModel MemberToDelete;
    private OrganizationMemberViewModel RoleChangeMember;
    private int NewRoleToSet;

    private string _eventTitleFilter = string.Empty;
    private bool _onlyEditable = false;

    private bool IsOwner = false;
    private bool IsOrganizer = false;
    private bool IsMember = false;
    private bool CanCreateEvents = false;

    private string _selectedStatus = null;
    private readonly List<string> _statusOptions = new() { "", "Offen", "Geschlossen", "Abgesagt", "Archiviert", "Entwurf" };


    private PeriodicTimer? _refreshTimer;
    private CancellationTokenSource _cts = new();

    protected override async Task OnInitializedAsync()
    {
        await CheckUserPermissions();
        await LoadEvents();
        await LoadMembers();
      
        _refreshTimer = new PeriodicTimer(TimeSpan.FromSeconds(10));
        _ = AutoRefreshAsync();
    }

    private async Task CheckUserPermissions()
    {
        var role = await JwtClaimHelper.GetUserRoleAsync(AuthProvider);
        Console.WriteLine($"[Home] Benutzerrolle: {role}");

        IsOwner = string.Equals(role, "Owner", StringComparison.OrdinalIgnoreCase);
        IsOrganizer = string.Equals(role, "Organizer", StringComparison.OrdinalIgnoreCase);
        IsMember = string.Equals(role, "Member", StringComparison.OrdinalIgnoreCase);

        CanCreateEvents = IsOwner || IsOrganizer;
    }

    private async Task LoadEvents()
    {
        var token = await SessionStorage.GetItemAsync<string>("authToken");
        var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

        var request = new HttpRequestMessage(HttpMethod.Get, $"api/event/eventList/{domain}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (!response.IsSuccessStatusCode)
        {
            Snackbar.Add("Fehler beim Laden der Events", Severity.Error);
            return;
        }

        var dtoList = await response.Content.ReadFromJsonAsync<List<EventListDto>>() ?? new();
        Events = dtoList.Select(EventListViewMapper.ToViewModel).ToList();

        ApplyEventFilter();
    }

    private async Task LoadMembers()
    {
        var token = await SessionStorage.GetItemAsync<string>("authToken");
        var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

        var request = new HttpRequestMessage(HttpMethod.Get, $"api/organization/{domain}/members");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var dtoList = await response.Content.ReadFromJsonAsync<List<OrganizationMemberDto>>();
            OrgMembers = dtoList.Select(dto => new OrganizationMemberViewModel(dto.Email, dto.Firstname, dto.Lastname, dto.Role)).ToList();
        }
        else
        {
            Console.WriteLine("Fehler beim Laden der Mitglieder");
        }
    }

    private void ApplyEventFilter()
    {
        IEnumerable<EventViewModel> relevant = Events;

        if (_onlyEditable)
            relevant = relevant.Where(e => e.IsManagedByMe);
        else
        {
            relevant = Events
                .Where(e => e.IsPublic)
                .Concat(Events.Where(e => e.IsManagedByMe))
                .Distinct();
        }

        if (IsOwner)
            relevant = relevant.Concat(Events.Where(e => e.IsDraft && !e.IsManagedByMe));

        if (!string.IsNullOrWhiteSpace(_eventTitleFilter))
            relevant = relevant.Where(e => e.Name.Contains(_eventTitleFilter, StringComparison.OrdinalIgnoreCase));

        if (!string.IsNullOrWhiteSpace(_selectedStatus))
            relevant = relevant.Where(e => e.StatusDisplay == _selectedStatus);

        FilteredEvents = relevant.ToList();
    }

    private void AskDelete(EventViewModel ev)
    {
        _toDelete = ev;
        _showDelete = true;
    }

    private void RemoveMember(OrganizationMemberViewModel member)
    {
        MemberToDelete = member;
        ShowConfirmDialog = true;
    }


    private async Task DeleteConfirmed(bool ok)
    {
        if (!ok || _toDelete == null) return;

        var success = await EventApi.DeleteEventAsync(_toDelete.Id);
        if (success)
        {
            Events.Remove(_toDelete);
            ApplyEventFilter();
            Snackbar.Add("Event gelöscht.", Severity.Success);
        }
        else
        {
            Snackbar.Add("Löschen fehlgeschlagen.", Severity.Error);
        }

        _toDelete = null;
        _showDelete = false;
    }
    
    private Color GetStatusColor(string status)
    {
        return status switch
        {
            "Offen" => Color.Success,
            "Geschlossen" => Color.Warning,
            "Abgesagt" => Color.Error,
            "Archiviert" => Color.Transparent,
            "Entwurf" => Color.Info,
            _ => Color.Default
        };
    }

    private void NavigateToEventEdit(int id) => Navigation.NavigateTo($"/EventErstellen/{id}");
    private void NavigateToEventDetails(int id) => Navigation.NavigateTo($"/EventDetails/{id}");
    private void NavigateToEventCreation() => Navigation.NavigateTo("/EventErstellen");
    private void ChangeOrgaData() => Navigation.NavigateTo("/Organisationsdaten");

    private void PrepareRoleChange(OrganizationMemberViewModel member, int neueRolle)
    {
        if (member.Role == neueRolle) return;

        RoleChangeMember = member;
        NewRoleToSet = neueRolle;
        ShowRoleConfirmDialog = true;
    }

    private async Task HandleRoleConfirm(bool confirmed)
    {
        if (confirmed && RoleChangeMember is not null)
        {
            var success = await UpdateRolle(RoleChangeMember, NewRoleToSet);
            if (success)
                Snackbar.Add("Rolle erfolgreich geändert.", Severity.Success);
            else
                Snackbar.Add("Fehler beim Ändern der Rolle.", Severity.Error);
        }

        ShowRoleConfirmDialog = false;
        RoleChangeMember = null;
        NewRoleToSet = -1;
    }

    private async Task<bool> UpdateRolle(OrganizationMemberViewModel member, int neueRolle)
    {
        if (member.Role == neueRolle) return true;

        var token = await SessionStorage.GetItemAsync<string>("authToken");
        var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

        var request = new HttpRequestMessage(HttpMethod.Put, $"api/organization/{domain}/members/{member.Email}/role/{neueRolle}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            member.Role = neueRolle;
            return true;
        }

        Console.WriteLine($"Fehler beim Rollenwechsel: {response.StatusCode}");
        return false;
    }

    private async Task HandleDeleteConfirm(bool confirmed)
    {
        if (confirmed && MemberToDelete is not null)
        {
            var token = await SessionStorage.GetItemAsync<string>("authToken");
            var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

            var request = new HttpRequestMessage(HttpMethod.Delete, $"api/organization/{domain}/members/{MemberToDelete.Email}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                OrgMembers.Remove(MemberToDelete);
                Snackbar.Add("Mitglied aus Organisation entfernt.", Severity.Success);
                StateHasChanged();
            }
            else
            {
	            try
	            {
		            var json = await response.Content.ReadAsStringAsync();

		            if (!string.IsNullOrWhiteSpace(json))
		            {
			            using var doc = JsonDocument.Parse(json);

			            // JSON ist ein Array mit einem Objekt, das eine "message" enthält
			            var firstItem = doc.RootElement.EnumerateArray().FirstOrDefault();

			            if (firstItem.TryGetProperty("message", out var messageElement))
			            {
				            var msg = messageElement.GetString();
				            if (!string.IsNullOrWhiteSpace(msg))
				            {
					            Snackbar.Add(msg, Severity.Error);
					            return;
				            }
			            }
		            }

		            Snackbar.Add("Mitglied konnte nicht entfernt werden.", Severity.Error);
	            }
	            catch
	            {
		            Snackbar.Add("Mitglied konnte nicht entfernt werden.", Severity.Error);
	            }
            }
        }
        ShowConfirmDialog = false;
        MemberToDelete = null;
    }

   
    private async Task ToggleSubscription(EventViewModel ev)
    {
	    bool ok = ev.IsSubscribed
		    ? await EventApi.UnsubscribeAsync(ev.Id)
		    : await EventApi.SubscribeAsync(ev.Id);

	    if (ok)
	    {
		    ev.IsSubscribed = !ev.IsSubscribed;
		    ev.Participants += ev.IsSubscribed ? +1 : -1;
		    Snackbar.Add(ev.IsSubscribed ? "Angemeldet!" : "Abgemeldet!", Severity.Success);
		    StateHasChanged();
	    }
	    else
		    Snackbar.Add("Aktion fehlgeschlagen.", Severity.Error);
    }

    private async Task HandleDeleteFromGrid()
    {
	    await LoadEvents();     
	    StateHasChanged();     
    }

    private async Task AutoRefreshAsync()
    {
	    try
	    {
		    while (await _refreshTimer!.WaitForNextTickAsync(_cts.Token))
		    {
			    await LoadEvents();
			    await InvokeAsync(StateHasChanged);
		    }
	    }
	    catch (OperationCanceledException) { /* Timer gestoppt */ }
    }

    public void Dispose()
    {
	    _cts.Cancel();
	    _cts.Dispose();
	    _refreshTimer?.Dispose();
    }
}