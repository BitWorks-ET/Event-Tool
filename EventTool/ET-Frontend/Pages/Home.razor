@page "/home"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using ET.Shared.DTOs
@using ET_Frontend.Models
@using Blazored.SessionStorage
@using ET_Frontend.Helpers
@using ET_Frontend.Mapping
@using ET_Frontend.Models.Event
@using ET_Frontend.Pages.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject HttpClient Http
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject Services.ApiClients.IEventApi EventApi 
@inject ISnackbar Snackbar

<PageTitle>Home</PageTitle>

<div class="flex-md-column align-content-between justify-content-center w-100 h-100">
    <MudPaper Width="100%" Height="100%">
        <MudTabs Class="h-100" Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6 h-100">

            <!-- Events Tab -->
            <MudTabPanel Text="Events">
                <MudText Typo="Typo.h4" Class="mb-3">Events</MudText>
                <MudDataGrid T="EventViewModel" Items="@Events" Dense="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Name" Title="Name" />
                        <PropertyColumn Property="x => x.Description" Title="Beschreibung" />
                        <PropertyColumn Property="x => x.Participants" Title="Teilnehmer" />
                        <PropertyColumn Property="x => x.MaxParticipants" Title="Maximale Teilnehmer" />
                        <TemplateColumn CellClass="d-flex justify-end">
                            <CellTemplate Context="eventItem">
                                <MudStack Row Spacing="1">
                                    <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigateToEventDetails(eventItem.Item.EventId))">
                                        Details
                                    </MudButton>
                                    @if (eventItem.Item.IsOrganizer)
                                    {
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => Navigation.NavigateTo($"/EventBearbeiten/{eventItem.Item.EventId}"))">
                                            Bearbeiten
                                        </MudButton>
                                    }
                                    <MudButton Size="Size.Small"
                                               Variant="Variant.Filled"
                                               Color="Color.Primary"
                                               OnClick="@(() => ToggleSubscription(eventItem.Item))">
	                                    @(eventItem.Item.IsSubscribed ? "Abmelden" : "Anmelden")
                                    </MudButton>
								</MudStack>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
                @if (CanCreateEvents){
                    <MudButton Class="float-end mt-4" Variant="Variant.Filled" Color="Color.Primary" OnClick="NavigateToEventCreation">
                        Event erstellen
                    </MudButton>
                }
            </MudTabPanel>

            <!-- Organisation Tab -->
            @if (IsOwner)
            {
                <MudTabPanel Text="Organisation">
                    <MudText Typo="Typo.h4" Class="mb-3">Mitglieder</MudText>
                    <MudDataGrid T="OrganizationMemberViewModel" Items="@OrgMembers" Dense="true">
                        <Columns>
                            <PropertyColumn Property="x => x.LastName" Title="Nachname" />
                            <PropertyColumn Property="x => x.Email" Title="E-Mail" />
                            <TemplateColumn Title="Rolle">
                                <CellTemplate Context="ctx">
                                    <MudSelect T="int" Dense="true" Value="ctx.Item.Role" ValueChanged="@((int r) => PrepareRoleChange(ctx.Item, r))">
                                        <MudSelectItem Value="0">Owner</MudSelectItem>
                                        <MudSelectItem Value="1">Organisator</MudSelectItem>
                                        <MudSelectItem Value="2">Mitglied</MudSelectItem>
                                    </MudSelect>
                                </CellTemplate>
                            </TemplateColumn>
                            <TemplateColumn Title="" CellClass="text-end">
                                <CellTemplate Context="ctx">
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveMember(ctx.Item))">
                                        Entfernen
                                    </MudButton>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                    <MudButton Class="float-end mt-4" OnClick="ChangeOrgaData" Variant="Variant.Filled" Color="Color.Primary">Organisationsdaten ändern</MudButton>

                    @if (ShowConfirmDialog)
                    {
                        <SimpleConfirm Message="Das Mitglied wird dauerhaft aus der Organisation entfernt. Möchten Sie fortfahren?"
                        ConfirmText="Löschen"
                        OnConfirm="HandleDeleteConfirm" />
                    }

                    @if (ShowRoleConfirmDialog)
                    {
                        <SimpleConfirm Message="Möchten Sie die Rolle dieses Mitglieds wirklich ändern?"
                        ConfirmText="Ändern"
                        OnConfirm="HandleRoleConfirm" />
                    }
                </MudTabPanel>
            }
        </MudTabs>
    </MudPaper>
</div>

@code {
    private List<OrganizationMemberViewModel> OrgMembers = new();
    private List<EventViewModel> Events = new();

    private bool ShowConfirmDialog = false;
    private bool IsOwner = false;
    private bool CanCreateEvents = false;

    private OrganizationMemberViewModel MemberToDelete;

    private bool ShowRoleConfirmDialog = false;
    private OrganizationMemberViewModel RoleChangeMember;
    private int NewRoleToSet;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
        await LoadMembers();
        await CheckUserPermissions();
    }

    private async Task CheckUserPermissions()
    {
        var role = await JwtClaimHelper.GetUserRoleAsync(AuthProvider);
        Console.WriteLine($"[Home] Benutzerrolle: {role}");

        IsOwner = string.Equals(role, "owner", StringComparison.OrdinalIgnoreCase);
        CanCreateEvents = IsOwner || string.Equals(role, "organisator", StringComparison.OrdinalIgnoreCase);
    }


    private async Task LoadEvents()
    {
	    var token = await SessionStorage.GetItemAsync<string>("authToken");
	    var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);
	    var request = new HttpRequestMessage(HttpMethod.Get, $"api/event/eventList/{domain}");
	    request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

	    var response = await Http.SendAsync(request);
	    if (response.IsSuccessStatusCode)
	    {
		    var dtoList = await response.Content.ReadFromJsonAsync<List<EventListDto>>();
		    Events = dtoList?.Select(EventListViewMapper.ToViewModel).ToList() ?? new();
	    }
	    else
	    {
		    Console.WriteLine("Fehler beim Laden der Events");
	    }
    }

    private async Task LoadMembers()
    {
        var token = await SessionStorage.GetItemAsync<string>("authToken");
        var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);
        var request = new HttpRequestMessage(HttpMethod.Get, $"api/organization/{domain}/members");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var dtoList = await response.Content.ReadFromJsonAsync<List<OrganizationMemberDto>>();
            OrgMembers = dtoList.Select(dto => new OrganizationMemberViewModel(dto.Email, dto.Lastname, dto.Role)).ToList();
        }
        else
        {
            Console.WriteLine("Fehler beim Laden der Mitglieder");
        }
    }

    private async Task UpdateRolle(OrganizationMemberViewModel member, int neueRolle)
    {
        if (member.Role == neueRolle) return;

        var token = await SessionStorage.GetItemAsync<string>("authToken");
        var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

        var request = new HttpRequestMessage(
            HttpMethod.Put,
            $"api/organization/{domain}/members/{member.Email}/role/{neueRolle}");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);

        if (response.IsSuccessStatusCode)
            member.Role = neueRolle;
        else
            Console.WriteLine($"Fehler beim Rollenwechsel: {response.StatusCode}");
    }

    private void PrepareRoleChange(OrganizationMemberViewModel member, int neueRolle)
    {
        if (member.Role == neueRolle) return;

        RoleChangeMember = member;
        NewRoleToSet = neueRolle;
        ShowRoleConfirmDialog = true;
    }

    private async Task HandleRoleConfirm(bool confirmed)
    {
        if (confirmed && RoleChangeMember is not null)
        {
            await UpdateRolle(RoleChangeMember, NewRoleToSet);
        }

        ShowRoleConfirmDialog = false;
        RoleChangeMember = null;
        NewRoleToSet = -1;
    }

    private void RemoveMember(OrganizationMemberViewModel member)
    {
        MemberToDelete = member;
        ShowConfirmDialog = true;
    }

    private async Task HandleDeleteConfirm(bool confirmed)
    {
        if (confirmed && MemberToDelete is not null)
        {
            var token = await SessionStorage.GetItemAsync<string>("authToken");
            var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

            var request = new HttpRequestMessage(
                HttpMethod.Delete,
                $"api/organization/{domain}/members/{MemberToDelete.Email}");
            request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                OrgMembers.Remove(MemberToDelete);
                StateHasChanged();
            }
            else
                Console.WriteLine($"Fehler beim Löschen: {response.StatusCode}");
        }

        ShowConfirmDialog = false;
        MemberToDelete = null;
    }

    private void NavigateToEventCreation()
    {
        Navigation.NavigateTo("/EventErstellen");
    }

    private void NavigateToEventDetails(int eventId)
    {
        Navigation.NavigateTo($"/EventDetails/{eventId}");
    }

    private void ChangeOrgaData()
    {
        Navigation.NavigateTo("/Organisationsdaten");
    }

    private async Task ToggleSubscription(EventViewModel ev)
    {
	    bool ok = ev.IsSubscribed
		    ? await EventApi.UnsubscribeAsync(ev.EventId)
		    : await EventApi.SubscribeAsync(ev.EventId);

	    if (ok)
	    {
            await LoadEvents();
		    ev.IsSubscribed = !ev.IsSubscribed;
		    StateHasChanged();
	    }
	    else
	    {
            Snackbar.Add("Fehler beim Anmelden zum Event.", Severity.Error);
	    }
    }
}
