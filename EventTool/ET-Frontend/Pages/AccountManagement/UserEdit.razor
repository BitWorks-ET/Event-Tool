@page "/User/Edit"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using ET_Frontend.Pages.Components
@using System.ComponentModel.DataAnnotations
@using ET_Frontend.Helpers
@using ET_Frontend.Models.AccountManagement
@using ET_Frontend.Services.Authentication
@using ET.Shared.DTOs;
@using MudBlazor

@inject ET_Frontend.Services.ApiClients.IUserApi UserApi
@inject JwtAuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<PageTitle>Nutzerdaten bearbeiten</PageTitle>

<div class="flex-md-column w-100 h-100 p-4">
    <MudText Typo="Typo.h4">Benutzerdaten</MudText>

    <MudForm Model="@userModel" @ref="_editForm" OnValidSubmit="toRegister">

        <MudTextField @bind-Value="userModel.FirstName"
                      Label="Vorname"
                      For="@(() => userModel.FirstName)"
                      Required="true"
                      RequiredError="Vorname ist erforderlich."
                      Variant="Variant.Filled"
                      Margin="Margin.Dense"
                      Class="mb-3" />

        <MudTextField @bind-Value="userModel.LastName"
                      Label="Nachname"
                      For="@(() => userModel.LastName)"
                      Required="true"
                      RequiredError="Nachname ist erforderlich."
                      Variant="Variant.Filled"
                      Margin="Margin.Dense"
                      Class="mb-3" />

        <MudTextField @bind-Value="userModel.Password"
                      Label="Passwort"
                      InputType="InputType.Password"
                      For="@(() => userModel.Password)"
                      Required="true"
                      RequiredError="Passwort ist erforderlich."
                      Variant="Variant.Filled"
                      Margin="Margin.Dense"
                      Class="mb-3" />

        <MudTextField @bind-Value="userModel.Reppassword"
                      Label="Passwort wiederholen"
                      InputType="InputType.Password"
                      For="@(() => userModel.Reppassword)"
                      Required="true"
                      RequiredError="Wiederholtes Passwort ist erforderlich."
                      Variant="Variant.Filled"
                      Margin="Margin.Dense"
                      Class="mb-3" />

        <!-- Buttonbereich -->
        <div class="d-flex justify-content-between align-items-start mt-4" style="gap: 1.5rem;">
            <div class="d-flex" style="gap: 1.5rem;">
                <MudButton Type="ButtonType.Button"
                           OnClick="ResetChanges"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="px-4 py-2">
                    Änderungen zurücksetzen
                </MudButton>

                <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           OnClick="@(() => showDeleteConfirmDialog = true)"
                           Class="px-4 py-2">
                    Benutzer löschen
                </MudButton>
            </div>

            <MudButton Type="ButtonType.Submit"
                       OnClick="ChangeUserInfo"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="px-4 py-2">
                Änderungen speichern
            </MudButton>
        </div>

        <!-- Popup Feedback -->
        <div class="d-flex w-100 align-content-center justify-content-center mt-3">
            <MudPopover OverflowBehavior="OverflowBehavior.FlipNever"
                        Open="@popupState"
                        AnchorOrigin="Origin.CenterCenter"
                        TransformOrigin="Origin.CenterCenter"
                        Class="pa-4 flex-column">
                <MudText Typo="Typo.body2" Class="px-4 py-1">@popupText</MudText>
                <MudButton Class="float-end" OnClick="@(() => popupState = false)">OK</MudButton>
            </MudPopover>
        </div>

    </MudForm>
</div>

<!-- Confirm Dialog -->
@if (showDeleteConfirmDialog)
{
    <SimpleConfirm Message="Sind Sie sicher, dass Sie Ihr Benutzerkonto und damit auch alle Mitgliedschaften löschen möchten? Diese Aktion kann nicht rückgängig gemacht werden."
                   ConfirmText="Löschen"
                   OnConfirm="HandleDeleteConfirm" />
}

@code {
    private MudForm _editForm;
    private UserEditViewModel userModel = new();

    private bool popupState = false;
    private string popupText = "Wir tun mal so, als wäre das ein Easter Egg. Glückwunsch!";

    private bool showDeleteConfirmDialog = false;

    protected override async Task OnInitializedAsync()
    {
        var id = await JwtClaimHelper.GetUserIdAsync(AuthProvider);
        if (id < 1)
        {
            popupText = "Nicht eingeloggt oder ID ungültig.";
            popupState = true;
            return;
        }

        var data = await UserApi.GetCurrentUserAsync();
        if (data != null)
        {
            userModel = new UserEditViewModel
            {
                FirstName = data.FirstName,
                LastName = data.LastName,
                Password = string.Empty,
                Reppassword = string.Empty
            };
        }
        else
        {
            popupText = "Fehler beim Laden der Benutzerdaten.";
            popupState = true;
        }
    }

    private async Task ChangeUserInfo()
    {
        var success = await UserApi.UpdateUserAsync(userModel);
        popupText = success ? "Änderungen gespeichert" : "Fehler beim Speichern der Daten";
        popupState = true;
    }

    private async Task ResetChanges()
    {
        await OnInitializedAsync();
        popupText = "Änderungen verworfen";
        popupState = true;
    }

    private async Task HandleDeleteConfirm(bool confirmed)
    {
        showDeleteConfirmDialog = false;

        if (!confirmed)
            return;

        // Hier später API-Aufruf + Logout
        Console.WriteLine("Benutzer wurde zur Löschung bestätigt.");
    }
}
