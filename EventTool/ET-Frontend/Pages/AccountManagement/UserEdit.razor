@page "/User/Edit"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization

@using System.ComponentModel.DataAnnotations
@using ET_Frontend.Helpers
@using ET_Frontend.Models.AccountManagement
@using ET_Frontend.Services.Authentication
@using ET.Shared.DTOs;
@using MudBlazor

@inject ET_Frontend.Services.ApiClients.IUserApi UserApi
@inject JwtAuthenticationStateProvider AuthProvider

<PageTitle>Nutzerdaten bearbeiten</PageTitle>

<div class="flex-md-column w-100 h-100 p-4">
    <MudText Typo="Typo.h4">Benutzerdaten </MudText>
    <MudForm Model="@userModel" @ref="_editForm" OnValidSubmit="toRegister">

        <MudTextField @bind-Value="userModel.FirstName"
                      Label="Vorname"
                      For="@(() => userModel.FirstName)"
                      Required="true"
                      RequiredError="Vorname ist erforderlich."
                      Variant="Variant.Filled"
                      Margin="Margin.Dense"
                      Class="mb-3" />

        <MudTextField @bind-Value="userModel.LastName"
                      Label="Nachname"
                      For="@(() => userModel.LastName)"
                      Required="true"
                      RequiredError="Nachname ist erforderlich."
                      Variant="Variant.Filled"
                      Margin="Margin.Dense"
                      Class="mb-3" />

        <MudTextField @bind-Value="userModel.Password"
                      Label="Passwort"
                      InputType="InputType.Password"
                      For="@(() => userModel.Password)"
                      Required="true"
                      RequiredError="Passwort ist erforderlich."
                      Variant="Variant.Filled"
                      Margin="Margin.Dense"
                      Class="mb-3" />

        <MudTextField @bind-Value="userModel.Reppassword"
                      Label="Passwort wiederholen"
                      InputType="InputType.Password"
                      For="@(() => userModel.Reppassword)"
                      Required="true"
                      RequiredError="Wiederholtes Passwort ist erforderlich."
                      Variant="Variant.Filled"
                      Margin="Margin.Dense"
                      Class="mb-3" />
        <div class="d-flex w-100 align-content-center justify-content-between">
            <MudButton Type="ButtonType.Submit"
                       OnClick="ResetChanges"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-2">
                Änderungen zurücksetzten
            </MudButton>

            <div class="d-flex w-100 align-content-center justify-content-center">
                <MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@popupState" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4 flex-column">
                    <MudText Typo="Typo.body2" Class="px-4 py-1">@popupText</MudText>
                    <MudButton Class="float-end" OnClick="@(() => popupState = false)">OK</MudButton>
                </MudPopover>
            </div>

            <MudButton Type="ButtonType.Submit"
                       OnClick="ChangeUserInfo"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-2">
                Änderungen Speichern
            </MudButton>
        </div>

    </MudForm>
</div>

@code {
	private MudForm _editForm;
	private UserEditViewModel userModel = new();

	private bool popupState = false;
    private string popupText = "Wir tun mal so, als wäre das ein Easter Egg. Glückwunsch!";

	protected override async Task OnInitializedAsync()
	{
		var id = await JwtClaimHelper.GetUserIdAsync(AuthProvider);
		if (id < 1)
		{
			popupText = "Nicht eingeloggt oder ID ungültig.";
			popupState = true;
			return;
		}

		var data = await UserApi.GetCurrentUserAsync();
		if (data != null)
		{
			userModel = new UserEditViewModel
			{
				FirstName = data.FirstName,
				LastName = data.LastName,
				Password = string.Empty,
				Reppassword = string.Empty
			};
		}
		else
		{
			popupText = "Fehler beim Laden der Benutzerdaten.";
			popupState = true;
		}
	}

	private async Task ChangeUserInfo()
	{
		var success = await UserApi.UpdateUserAsync(userModel);
		popupText = success ? "Änderungen gespeichert" : "Fehler beim Speichern der Daten";
		popupState = true;
	}

	private async Task ResetChanges()
	{
		await OnInitializedAsync();
		popupText = "Änderungen verworfen";
		popupState = true;
	}
}