@page "/login"

@using ET.Shared.DTOs
@using MudBlazor
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations

@inject NavigationManager Nav
@inject HttpClient Http

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: 100vh;">
    <MudCard Class="pa-6" Elevation="4">
        <MudCardContent>

            <!-- Logo-Bereich -->
            <div class="text-center mb-4">
                <MudPaper Class="d-flex justify-center mb-3" Elevation="0">
                    <img src="images/BitWorksSimpel-Gro.png" alt="BitWorks Logo" width="120" height="120" />
                </MudPaper>
            </div>

            <!-- Überschrift -->
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Melden Sie sich an</MudText>

            <!-- Anmeldeformular -->
            <MudForm @ref="_form" Model="@formModel" OnValidSubmit="HandleLogin">
                <!-- E-Mail-Eingabe -->
                <MudTextField @bind-Value="formModel.Email"
                Label="E-Mail"
                Required="true"
                For="@(() => formModel.Email)"
                RequiredError="E-Mail ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Passwort-Eingabe -->
                <MudTextField @bind-Value="formModel.Password"
                Label="Passwort"
                InputType="InputType.Password"
                Required="true"
                For="@(() => formModel.Password)"
                RequiredError="Passwort ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Anmeldebutton -->
                <MudButton Type="ButtonType.Submit"
                           Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="mt-2"
                           FullWidth>
	                Anmelden
                </MudButton>
				
                @if (!string.IsNullOrWhiteSpace(_error))
                {
	                <MudText Typo="Typo.body2" Class="mt-2 text-danger" Align="Align.Center">
		                @_error
	                </MudText>
                }

            </MudForm>

            <!-- Link zur Registrierung -->
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
                Sie haben noch kein Konto?
                <MudLink OnClick="@(() => Nav.NavigateTo("/register"))" Class="ms-1">Registrieren</MudLink>
            </MudText>

        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    /// <summary>
    /// Referenz auf das Formular zur Validierung.
    /// </summary>
    private MudForm _form;

    /// <summary>
    /// Fehlermeldung der API-Antwort
    /// </summary>
    private string? _error;

    /// <summary>
    /// Formular-Model nur fürs UI/Validierung (parameterlos).
    /// </summary>
    private LoginModel formModel = new();

    /// <summary>
    /// Wird bei erfolgreicher Validierung des Formulars aufgerufen.
    /// </summary>
    private async Task HandleLogin()
    {
	    await _form.Validate();
	    if (!_form.IsValid) return;

	    var dto = new LoginDto(formModel.Email, formModel.Password);

	    try
	    {
		    var resp = await Http.PostAsJsonAsync("api/authenticate/login", dto);

		    if (resp.IsSuccessStatusCode)
			    Nav.NavigateTo("/");                // weiter zur Start-Seite
		    else
			    _error = await resp.Content.ReadAsStringAsync();
	    }
	    catch (Exception ex)
	    {
		    _error = ex.Message;
	    }
    }

    /// <summary>
    /// UI-Modell für den Login-Vorgang mit Validierungen.
    /// </summary>
    public class LoginModel
    {
	    /// <summary>
	    /// Die E-Mail-Adresse des Benutzers.
	    /// </summary>
	    [Required(ErrorMessage = "E-Mail ist erforderlich.")]
	    [EmailAddress(ErrorMessage = "Ungültige E-Mail-Adresse.")]
	    public string Email { get; set; } = "";

	    /// <summary>
	    /// Das Passwort des Benutzers.
	    /// </summary>
	    [Required(ErrorMessage = "Passwort ist erforderlich.")]
	    public string Password { get; set; } = "";
    }
}
