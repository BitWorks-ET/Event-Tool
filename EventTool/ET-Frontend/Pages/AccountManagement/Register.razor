@page "/register"

@using ET.Shared.DTOs
@using System.Net.Http
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using MudBlazor

@inject HttpClient Http
@inject NavigationManager Nav

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: 100vh;">
    <MudCard Class="pa-6" Elevation="4">
        <MudCardContent>

            <!-- Logo-Bereich -->
            <div class="text-center mb-4">
                <MudPaper Class="d-flex justify-center mb-3" Elevation="0">
                    <img src="images/BitWorksSimpel-Gro.png" alt="BitWorks Logo" width="120" height="120" />
                </MudPaper>
            </div>

            <!-- Überschrift -->
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Registrieren Sie sich <br/>(angelegte Domain: demo.org)</MudText>

            <!-- Registrierungsformular -->
            <MudForm @ref="_form"
                     Model="@formModel">
					 
	            <!-- Vorname -->
                <MudTextField @bind-Value="formModel.FirstName"
                Label="Vorname"
                For="@(() => formModel.FirstName)"
                Required="true"
                RequiredError="Vorname ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Nachname -->
                <MudTextField @bind-Value="formModel.LastName"
                Label="Nachname"
                For="@(() => formModel.LastName)"
                Required="true"
                RequiredError="Nachname ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- E-Mail -->
                <MudTextField @bind-Value="formModel.EMail"
                Label="E-Mail"
                For="@(() => formModel.EMail)"
                Required="true"
                RequiredError="E-Mail ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Passwort -->
                <MudTextField @bind-Value="formModel.Password"
                Label="Passwort"
                InputType="InputType.Password"
                For="@(() => formModel.Password)"
                Required="true"
                RequiredError="Passwort ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Passwort wiederholen -->
                <MudTextField @bind-Value="formModel.RepPassword"
                Label="Passwort wiederholen"
                InputType="InputType.Password"
                For="@(() => formModel.RepPassword)"
                Required="true"
                RequiredError="Wiederholtes Passwort ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />
				

                <!-- Registrierungsbutton -->
	            <MudButton Variant="Variant.Filled"
	                       Color="Color.Primary"
	                       Class="mt-2"
	                       FullWidth
	                       OnClick="SubmitAsync">
		            Registrieren
	            </MudButton>


				
                @if (!string.IsNullOrWhiteSpace(_error))
                {
	                <MudText Typo="Typo.body2" Class="mt-2 text-danger" Align="Align.Center">
		                @_error
	                </MudText>
                }

            </MudForm>

            <!-- Link zur Login-Seite -->
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
                Haben Sie bereits ein Konto?
                <MudLink OnClick="@(() => Nav.NavigateTo("/login"))" Class="ms-1">Anmelden</MudLink>
            </MudText>

        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    /// <summary>
    /// Referenz auf das Formular für Validierung und Steuerung.
    /// </summary>
    private MudForm _form;

    /// <summary>
    /// Fehlermeldung der API-Antwort
    /// </summary>
	private string? _error;

    /// <summary>
    /// Formular-Model nur fürs UI/Validierung (parameterlos).
    /// </summary>
    private RegisterModel formModel = new();

    private async Task SubmitAsync()
    {
	    await _form.Validate();          // DataAnnotations prüfen
	    if (!_form.IsValid) return;      // bei Fehlern abbrechen

	    await HandleRegister();          // dein alter Code
    }

	/// <summary>
    /// Wird aufgerufen, wenn das Formular erfolgreich validiert wurde.
    /// Führt die POST-Anfrage an den Backend-Endpoint aus.
    /// </summary>
    private async Task HandleRegister()
    {
	    Console.WriteLine("Form validiert und Submit erkannt!");

	    // Mapping auf das Shared-DTO
	    var dto = new RegisterDto(
		    formModel.FirstName,
		    formModel.LastName,
		    formModel.EMail,
		    formModel.Password
	    );

	    try
	    {
		    // 2) API-Call: Wir senden unser DTO als JSON an den Controller
		    //    POST https://localhost:7085/api/authenticate/register
		    var response = await Http.PostAsJsonAsync("api/authenticate/register", dto);

		    // 3) Antwort auswerten
		    if (response.IsSuccessStatusCode)
		    {
			    // 201 Created oder 200 OK → weiter zur Login-Seite
			    Nav.NavigateTo("/login");
		    }
		    else
		    {
			    // HTTP-Fehlercode → Fehlermeldung aus dem Response-Body lesen
			    _error = await response.Content.ReadAsStringAsync();
		    }
	    }
	    catch (Exception ex)
	    {
		    // Fehlermeldung anzeigen
		    _error = ex.Message;
	    }
    }

    /// <summary>
    /// UI-Modell zur Benutzerregistrierung mit Validierungen.
    /// </summary>
    public class RegisterModel
    {
	    /// <summary>
	    /// Vorname des Benutzers.
	    /// </summary>
	    [Required(ErrorMessage = "Vorname ist erforderlich.")]
	    public string FirstName { get; set; } = "";

        /// <summary>
        /// Nachname des Benutzers.
        /// </summary>
        [Required(ErrorMessage = "Nachname ist erforderlich.")]
		public string LastName { get; set; } = "";

        /// <summary>
        /// E-Mail-Adresse des Benutzers.
        /// </summary>
        [Required(ErrorMessage = "E-Mail ist erforderlich.")]
        [EmailAddress(ErrorMessage = "Ungültige E-Mail-Adresse.")]
		public string EMail { get; set; } = "";

        /// <summary>
        /// Passwort des Benutzers. Mindestlänge 6 Zeichen.
        /// </summary>
        [Required(ErrorMessage = "Passwort ist erforderlich.")]
        [MinLength(6, ErrorMessage = "Passwort muss mindestens 6 Zeichen lang sein.")]
		public string Password { get; set; } = "";

        /// <summary>
        /// Wiederholung des Passworts. Muss mit dem Passwort übereinstimmen.
        /// </summary>
        [Required(ErrorMessage = "Wiederholtes Passwort ist erforderlich.")]
        [Compare(nameof(Password), ErrorMessage = "Passwörter stimmen nicht überein.")]
		public string RepPassword { get; set; } = "";
    }
}
