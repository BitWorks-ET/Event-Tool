@page "/register"
@inject NavigationManager Navigation
@inject ServiceClient _ServiceClient
@using System.ComponentModel.DataAnnotations
@using MudBlazor
<!--@using ET.Shared.DTOs;-->

<MudContainer MaxWidth="MaxWidth.Small" Class="d-flex align-center justify-center" Style="height: 100vh;">
    <MudCard Class="pa-6" Elevation="4">
        <MudCardContent>

            <!-- Logo-Bereich -->
            <div class="text-center mb-4">
                <MudPaper Class="d-flex justify-center mb-3" Elevation="0">
                    <img src="images/BitWorksSimpel-Gro.png" alt="BitWorks Logo" width="120" height="120" />
                </MudPaper>
            </div>

            <!-- Überschrift -->
            <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Registrieren Sie sich</MudText>

            <!-- Registrierungsformular -->
            <MudForm Model="@registerModel" @ref="_form" OnValidSubmit="toRegister">

                <!-- Vorname -->
                <MudTextField @bind-Value="registerModel.firstName"
                Label="Vorname"
                For="@(() => registerModel.firstName)"
                Required="true"
                RequiredError="Vorname ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Nachname -->
                <MudTextField @bind-Value="registerModel.lastName"
                Label="Nachname"
                For="@(() => registerModel.lastName)"
                Required="true"
                RequiredError="Nachname ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- E-Mail -->
                <MudTextField @bind-Value="registerModel.eMail"
                Label="E-Mail"
                For="@(() => registerModel.eMail)"
                Required="true"
                RequiredError="E-Mail ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Passwort -->
                <MudTextField @bind-Value="registerModel.password"
                Label="Passwort"
                InputType="InputType.Password"
                For="@(() => registerModel.password)"
                Required="true"
                RequiredError="Passwort ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Passwort wiederholen -->
                <MudTextField @bind-Value="registerModel.repPassword"
                Label="Passwort wiederholen"
                InputType="InputType.Password"
                For="@(() => registerModel.repPassword)"
                Required="true"
                RequiredError="Wiederholtes Passwort ist erforderlich."
                Variant="Variant.Filled"
                Margin="Margin.Dense"
                Class="mb-3" />

                <!-- Registrierungsbutton -->
                <MudButton Type="ButtonType.Submit"
                Variant="Variant.Filled"
                OnClick="ToRegister"
                Color="Color.Primary"
                Class="mt-2"
                FullWidth>
                    Registrieren
                </MudButton>

            </MudForm>

            <!-- Link zur Login-Seite -->
            <MudText Typo="Typo.body2" Align="Align.Center" Class="mt-4">
                Haben Sie bereits ein Konto?
                <MudLink OnClick="ToLogin" Class="ms-1">Anmelden</MudLink>
            </MudText>

        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    /// <summary>
    /// Referenz auf das Formular für Validierung und Steuerung.
    /// </summary>
    private MudForm _form;

    /// <summary>
    /// Modell mit den Benutzereingaben zur Registrierung.
    /// </summary>
    private RegisterModel registerModel = new();

    /// <summary>
    /// Navigiert zur Login-Seite.
    /// </summary>
    private void ToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    /// <summary>
    /// Wird aufgerufen, wenn das Formular erfolgreich validiert wurde.
    /// Hier könnte die Registrierung ausgelöst werden.
    /// </summary>
    private void ToRegister()
    {
        RegisterDto userRegDTO = new RegisterDto();
        userRegDTO.Firstname = registerModel.firstName;
        userRegDTO.Lastname = registerModel.lastName;
        userRegDTO.EMail = registerModel.eMail;
        userRegDTO.Password = registerModel.password;

        _ServiceClient.RegisterAsync(userRegDTO);
        // Console.WriteLine($"Registrierung mit DTO: {userRegDTO}");
        // z. B. Navigation.NavigateTo("/dashboard");
    }

    /// <summary>
    /// Datenmodell zur Benutzerregistrierung mit Validierungen.
    /// </summary>
    public class RegisterModel
    {
        /// <summary>
        /// Vorname des Benutzers.
        /// </summary>
        [Required(ErrorMessage = "Vorname ist erforderlich.")]
        public string firstName { get; set; }

        /// <summary>
        /// Nachname des Benutzers.
        /// </summary>
        [Required(ErrorMessage = "Nachname ist erforderlich.")]
        public string lastName { get; set; }

        /// <summary>
        /// E-Mail-Adresse des Benutzers.
        /// </summary>
        [Required(ErrorMessage = "E-Mail ist erforderlich.")]
        [EmailAddress(ErrorMessage = "Ungültige E-Mail-Adresse.")]
        public string eMail { get; set; }

        /// <summary>
        /// Passwort des Benutzers. Mindestlänge 6 Zeichen.
        /// </summary>
        [Required(ErrorMessage = "Passwort ist erforderlich.")]
        [MinLength(6, ErrorMessage = "Passwort muss mindestens 6 Zeichen lang sein.")]
        public string password { get; set; }

        /// <summary>
        /// Wiederholung des Passworts. Muss mit dem Passwort übereinstimmen.
        /// </summary>
        [Required(ErrorMessage = "Wiederholtes Passwort ist erforderlich.")]
        [Compare(nameof(password), ErrorMessage = "Passwörter stimmen nicht überein.")]
        public string repPassword { get; set; }
    }
}
