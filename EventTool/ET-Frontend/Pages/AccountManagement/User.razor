@page "/User"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using ET_Frontend.Pages.Components
@inject NavigationManager Navigation

<PageTitle>Nutzerkonto</PageTitle>

<!-- Inhalt -->
<div class="flex-md-column w-100 h-100 p-4">
    <!-- Überschrift -->
    <MudText Typo="Typo.h4">Mitgliedschaften</MudText>

    <!-- Grid -->
    <MudDataGrid T="Membership" Items="@memberships" Dense="true">
        <Columns>

            <!-- Organisation Name -->
            <PropertyColumn Property="x => x.OrganisationName" Title="Organisation" />

            <!-- E-Mail + Speichern (links) -->
            <TemplateColumn Title="E-Mail bearbeiten" CellClass="text-start">
                <CellTemplate Context="ctx">
                    @{
                        var email = ctx.Item.Email ?? "";
                        var atIndex = email.IndexOf('@');
                        var domain = atIndex >= 0 ? email[atIndex..] : "";
                        var id = ctx.Item.OrganisationId;

                        if (!emailLocalParts.ContainsKey(id))
                        {
                            var local = atIndex >= 0 ? email[..atIndex] : email;
                            emailLocalParts[id] = local;
                        }
                    }

                    <div class="d-inline-flex align-items-center" style="gap: 6px;">
                        <MudTextField @bind-Value="emailLocalParts[id]"
                                      Dense="true"
                                      Margin="Margin.Dense"
                                      Style="width: 150px;" />
                        <span class="text-muted">@domain</span>
                        <MudButton Size="Size.Small"
                                   Color="Color.Primary"
                                   Variant="Variant.Outlined"
                                   OnClick="@(() => ConfirmEmailSave(ctx.Item, emailLocalParts[id], domain))">
                            Speichern
                        </MudButton>
                    </div>
                </CellTemplate>
            </TemplateColumn>

            <!-- Aktionsspalte (rechte Seite) -->
            <TemplateColumn Title="" CellClass="text-end">
                <CellTemplate Context="ctx">
                    <div class="d-inline-flex align-items-center" style="gap: 8px;">
                        <MudButton Color="Color.Error"
                                   Variant="Variant.Filled"
                                   Size="Size.Small"
                                   OnClick="@(() => ConfirmRemove(ctx.Item))">
                            Entfernen
                        </MudButton>

                        <MudButton Color="Color.Success"
                                   Variant="Variant.Filled"
                                   Size="Size.Small"
                                   OnClick="@(() => SwitchToOrganization(ctx.Item))">
                            Öffnen
                        </MudButton>
                    </div>
                </CellTemplate>
            </TemplateColumn>

        </Columns>
    </MudDataGrid>
</div>

<!-- Confirm Dialoge -->
@if (showDeleteConfirmDialog)
{
    <SimpleConfirm Message="Die Mitgliedschaft wird dauerhaft entfernt."
                   ConfirmText="Entfernen"
                   OnConfirm="HandleDeleteConfirm" />
}

@if (showSaveEmailConfirmDialog)
{
    <SimpleConfirm Message="Möchten Sie die geänderte E-Mail-Adresse speichern?"
                   ConfirmText="Speichern"
                   OnConfirm="HandleSaveEmailConfirm" />
}

@code {
    private List<Membership> memberships = new()
    {
        new Membership { OrganisationName = "BitWorks", Email = "du@bitworks.de", OrganisationId = "bitworks" },
        new Membership { OrganisationName = "CodeLab", Email = "du@codelab.org", OrganisationId = "codelab" }
    };

    private Dictionary<string, string> emailLocalParts = new();

    private bool showDeleteConfirmDialog = false;
    private Membership membershipToDelete;

    private bool showSaveEmailConfirmDialog = false;
    private Membership membershipToUpdate;
    private string updatedLocalPart = "";
    private string updatedDomain = "";

    public class Membership
    {
        public string OrganisationName { get; set; }
        public string Email { get; set; }
        public string OrganisationId { get; set; }
    }

    private void ConfirmRemove(Membership entry)
    {
        membershipToDelete = entry;
        showDeleteConfirmDialog = true;
    }

    private void HandleDeleteConfirm(bool confirmed)
    {
        if (confirmed && membershipToDelete is not null)
        {
            memberships.Remove(membershipToDelete);
        }

        membershipToDelete = null;
        showDeleteConfirmDialog = false;
    }

    private void ConfirmEmailSave(Membership entry, string localPart, string domain)
    {
        membershipToUpdate = entry;
        updatedLocalPart = localPart;
        updatedDomain = domain;
        showSaveEmailConfirmDialog = true;
    }

    private void HandleSaveEmailConfirm(bool confirmed)
    {
        if (confirmed && membershipToUpdate is not null)
        {
            membershipToUpdate.Email = $"{updatedLocalPart}{updatedDomain}";
            Console.WriteLine($"Email gespeichert: {membershipToUpdate.Email} für {membershipToUpdate.OrganisationName}");
        }

        membershipToUpdate = null;
        updatedLocalPart = "";
        updatedDomain = "";
        showSaveEmailConfirmDialog = false;
    }

    private void SwitchToOrganization(Membership entry)
    {
        Navigation.NavigateTo($"/?org={entry.OrganisationId}");
    }

    private void ChangeUserInfo()
    {
        Navigation.NavigateTo("/User/Edit");
    }
}
