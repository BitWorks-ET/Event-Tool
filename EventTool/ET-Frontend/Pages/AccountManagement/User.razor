@page "/User"

@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using ET_Frontend.Models.AccountManagement
@using ET_Frontend.Services.Authentication

@inject NavigationManager Navigation
@inject Services.ApiClients.IUserApi UserApi
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject JwtAuthenticationStateProvider AuthProvider

<PageTitle>Nutzerkonto</PageTitle>

<!-- Inhalt -->
<div class="flex-md-column w-100 h-100 p-4">
    <!-- Überschrift -->
    <MudText Typo="Typo.h4">Mitgliedschaften</MudText>

    <!-- Grid -->
    <MudDataGrid T="MembershipViewModel" Items="@Mitgliedschaften" Dense="true">
        <Columns>

            <!-- Organisation Name -->
            <PropertyColumn Property="x => x.OrganisationName" Title="Organisation" />

            <!-- E-Mail + Speichern (links) -->
            <TemplateColumn Title="E-Mail bearbeiten" CellClass="text-start">
                <CellTemplate Context="ctx">
                    @{
                        var email = ctx.Item.Email ?? "";
                        var atIndex = email.IndexOf('@');
                        var domain = atIndex >= 0 ? email[atIndex..] : "";
                        var id = ctx.Item.OrganisationId;

                        // Initialisieren, wenn nötig
                        if (!EmailLocalParts.ContainsKey(id))
                        {
                            var local = atIndex >= 0 ? email[..atIndex] : email;
                            EmailLocalParts[id] = local;
                        }
                    }

                    <div class="d-inline-flex align-items-center" style="gap: 6px;">
                        <MudTextField @bind-Value="EmailLocalParts[id]"
                                      Dense="true"
                                      Margin="Margin.Dense"
                                      Style="width: 150px;" />
                        <span class="text-muted">@domain</span>
                        <MudButton Size="Size.Small"
                                   Color="Color.Primary"
                                   Variant="Variant.Outlined"
                                   OnClick="@(() => SpeichereEmail(ctx.Item, EmailLocalParts[id], domain))">
                            Speichern
                        </MudButton>
                    </div>
                </CellTemplate>
            </TemplateColumn>

            <!-- Aktionsspalte (rechte Seite) -->
            <TemplateColumn Title="" CellClass="text-end">
                <CellTemplate Context="ctx">
                    <div class="d-inline-flex align-items-center" style="gap: 8px;">
                        <MudButton Color="Color.Error"
                                   Variant="Variant.Filled"
                                   Size="Size.Small"
                                   OnClick="@(() => EntferneMitgliedschaft(ctx.Item))">
                            Entfernen
                        </MudButton>

                        <MudButton Color="Color.Success"
                                   Variant="Variant.Filled"
                                   Size="Size.Small"
                                   OnClick="@(() => SwitchMembership(ctx.Item.AccountId))">
                            Öffnen
                        </MudButton>
                    </div>
                </CellTemplate>
            </TemplateColumn>

        </Columns>
    </MudDataGrid>
</div>

@code {
	private List<MembershipViewModel> Mitgliedschaften = new();
	private Dictionary<int, string>   EmailLocalParts  = new(); 

	private bool   popupState = false;
	private string popupText  = "";

	protected override async Task OnInitializedAsync()
	{
		Mitgliedschaften = await UserApi.GetMembershipsAsync();

		foreach (var m in Mitgliedschaften)
		{
			var at = m.Email?.IndexOf('@') ?? -1;
			if (at > 0)
				EmailLocalParts[m.AccountId] = m.Email[..at];
			else
				EmailLocalParts[m.AccountId] = "";              // fallback
		}
	}

	private async Task SpeichereEmail(MembershipViewModel m, string local, string domain)
	{
		var mail = $"{local}{domain}";
		var ok   = await UserApi.UpdateEmailAsync(m.AccountId, mail);
		popupText  = ok ? "E-Mail gespeichert" : "Fehler beim Speichern";
		popupState = true;
		if (ok) m.Email = mail;
	}

	private async Task EntferneMitgliedschaft(MembershipViewModel m)
	{
		var ok = await UserApi.DeleteMembershipAsync(m.AccountId, m.OrganisationId);
    
		if (!ok)
		{
			popupText  = "Mitgliedschaft konnte nicht entfernt werden.";
			popupState = true;
			return;
		}

		Mitgliedschaften.Remove(m);

		// Falls keine Mitgliedschaften mehr vorhanden → logout
		if (Mitgliedschaften.Count == 0)
		{
			await SessionStorage.RemoveItemAsync("authToken");

			if (AuthProvider is JwtAuthenticationStateProvider jwtProvider)
				jwtProvider.NotifyAuthenticationStateChanged();

			Navigation.NavigateTo("/login", forceLoad: true);
		}
	}
	
	private async Task SwitchMembership(int accountId)
	{
		var token = await UserApi.SwitchAccountAsync(accountId);
		if (token is null)
		{
			popupText = "Organisation konnte nicht gewechselt werden."; popupState = true; return;
		}

		await AuthProvider.MarkUserAsAuthenticated(token); 
		Navigation.NavigateTo("/home", true);
	}
}
