@page "/EventErstellen"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using ET.Shared.DTOs
@using ET_Frontend.Helpers
@using System.Net.Http.Headers
@using System.Net.Http.Json
@using Blazored.SessionStorage
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISessionStorageService SessionStorage
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthProvider

<PageTitle>Event erstellen</PageTitle>


<div class="flex-md-column align-content-between justify-content-center w-100 h-100">
    <MudPaper Class="mt-4 p-6 rounded-lg shadow-md">
        <MudTabs Rounded="true" Border="true" @bind-ActivePanelIndex="_tabIndex" PanelClass="pa-4">

            <!-- Tab: Details -->
            <MudTabPanel Text="Details">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Eventname" @bind-Value="newEvent.Name" FullWidth="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Eventtyp" @bind-Value="newEvent.EventType" FullWidth="true" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Beschreibung" @bind-Value="newEvent.Description" Lines="3" FullWidth="true" />
                    </MudItem>

                    <!-- Verwalter (mehrfach) -->
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string"
                                   Label="Verwalter"
                                   SelectedValues="newEvent.Managers"
                                   SelectedValuesChanged="@(val => newEvent.Managers = val.ToList())"
                                   MultiSelection="true"
                                   Searchable="true">
                            @foreach (var member in GetSortedMembers())
                            {
                                <MudSelectItem Value="@member.Email">@member.LastName (@member.Email)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>



                    <!-- Ansprechpartner -->
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Ansprechpartner" @bind-Value="newEvent.ContactPerson"/>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Startdatum" @bind-Date="newEvent.StartDate" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Enddatum" @bind-Date="newEvent.EndDate" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int" Label="Minimale Teilnehmer" @bind-Value="newEvent.MinUsers" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int" Label="Maximale Teilnehmer" @bind-Value="newEvent.MaxUsers" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Anmeldebeginn" @bind-Date="newEvent.RegistrationStart" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Anmeldefrist" @bind-Date="newEvent.RegistrationDeadline" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="EventStatus" Label="Status" @bind-Value="newEvent.Status" FullWidth="true">
                            <MudSelectItem Value="EventStatus.Offen">Offen</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Geschlossen">Geschlossen</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Abgesagt">Abgesagt</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudDivider Class="my-4" />
                <div class="d-flex justify-end gap-3">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="ChooseTemplate">Vorlage wählen</MudButton>
                    <MudButton Color="Color.Default" Variant="Variant.Outlined" OnClick="SaveAsTemplate">Als Entwurf speichern</MudButton>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveEvent">Speichern</MudButton>
                </div>
            </MudTabPanel>

            <!-- Teilnehmer -->
            <MudTabPanel Text="Teilnehmer">
                <MudText Typo="Typo.h5" Class="mb-3">Teilnehmer</MudText>
                <MudDataGrid T="Participant" Items="@_participantList" Dense="true">
                    <Columns>
                        <PropertyColumn Property="x => x.LastName" Title="Nachname" />
                        <PropertyColumn Property="x => x.Email" Title="E-Mail" />
                        <TemplateColumn Title="" CellClass="text-end">
                            <CellTemplate Context="ctx">
                                <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveParticipant(ctx.Item))">
                                    Entfernen
                                </MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>

            <!-- Prozess -->
            <MudTabPanel Text="Prozess">
	            <ProcessPanel></ProcessPanel>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</div>

@code {
    private int _tabIndex = 0;
    private MyEvent newEvent = new();
    private List<Participant> _participantList = new();
    private List<OrganizationMemberViewModel> OrgMembers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
    }

    private async Task LoadMembers()
    {
        var token = await SessionStorage.GetItemAsync<string>("authToken");
        var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);
        var request = new HttpRequestMessage(HttpMethod.Get, $"api/organization/{domain}/members");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            var dtoList = await response.Content.ReadFromJsonAsync<List<OrganizationMemberDto>>();
            OrgMembers = dtoList.Select(dto => new OrganizationMemberViewModel(dto.Email, dto.Lastname, dto.Role)).ToList();
        }
        else
        {
            Console.WriteLine("Fehler beim Laden der Mitglieder");
        }
    }

    private void RemoveParticipant(Participant t)
    {
        _participantList.Remove(t);
    }

    private void SaveEvent()
    {
        Console.WriteLine($"[SPEICHERN] {newEvent.Name}");
        Console.WriteLine($"Ansprechpartner: {newEvent.ContactPerson}");
        Console.WriteLine($"Verwalter: {string.Join(", ", newEvent.Managers)}");
        Navigation.NavigateTo("/");
    }

    private void SaveAsTemplate()
    {
        newEvent.Status = EventStatus.Entwurf;
        Navigation.NavigateTo("/");
    }

    private void ChooseTemplate() { }

    public enum EventStatus
    {
        Entwurf,
        Offen,
        Geschlossen,
        Abgesagt,
        Archiviert
    }

    public class MyEvent
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public string EventType { get; set; }
        public string Description { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public int MinUsers { get; set; }
        public int MaxUsers { get; set; }
        public DateTime? RegistrationStart { get; set; }
        public DateTime? RegistrationDeadline { get; set; }
        public string ContactPerson { get; set; }
        public List<string> Managers { get; set; } = new();
        public EventStatus Status { get; set; } = EventStatus.Entwurf;
        public int RegisteredUsers { get; set; }
        public bool CanBeEdited { get; set; }
    }

    public class Participant
    {
        public string LastName { get; set; }
        public string Email { get; set; }
    }

    public class OrganizationMemberViewModel
    {
        public string Email { get; set; }
        public string LastName { get; set; }
        public int Role { get; set; }

        public OrganizationMemberViewModel(string email, string lastName, int role)
        {
            Email = email;
            LastName = lastName;
            Role = role;
        }
    }

    private IEnumerable<OrganizationMemberViewModel> GetSortedMembers()
    {
        return OrgMembers
            .OrderByDescending(m => newEvent.Managers.Contains(m.Email)) // ausgewählte zuerst
            .ThenBy(m => m.LastName); // dann alphabetisch
    }

}
