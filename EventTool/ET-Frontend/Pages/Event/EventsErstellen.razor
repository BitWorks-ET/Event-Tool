@page "/EventErstellen/{Id:int?}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using ET.Shared.DTOs
@using ET.Shared.DTOs.Enums
@using ET_Frontend.Helpers
@using System.Net.Http.Headers
@using Blazored.SessionStorage
@using ET_Frontend.Mapping
@using ET_Frontend.Models.Event
@using ET_Frontend.Services.ApiClients

@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISessionStorageService SessionStorage
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthProvider
@inject IEventApi EventApi
@inject ISnackbar Snackbar
@inject IProcessApi ProcessApi

<PageTitle>Event erstellen</PageTitle>

<div class="flex-md-column align-content-between justify-content-center w-100 h-100">
    <MudPaper Class="mt-4 p-6 rounded-lg shadow-md">
        <MudTabs Rounded="true" Border="true" @bind-ActivePanelIndex="_tabIndex" PanelClass="pa-4">

            <!-- Tab: Details -->
            <MudTabPanel Text="Details">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Eventname" @bind-Value="_newEvent.Name" FullWidth="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Eventtyp" @bind-Value="_newEvent.EventType" FullWidth="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Veranstaltungsort" @bind-Value="_newEvent.Location" FullWidth="true" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Beschreibung" @bind-Value="_newEvent.Description" Lines="3" FullWidth="true" />
                    </MudItem>

                    <!-- Verwalter (mehrfach) -->
                    <MudItem xs="12" sm="6">
	                    <MudSelect T="string"
	                               Label="Verwalter"
	                               SelectedValues="_newEvent.Managers"
	                               SelectedValuesChanged="@(val => _newEvent.Managers = val.ToList())"
	                               MultiSelection="true"
	                               Searchable="true">

		                    @foreach (var option in OrganizerOptions)
		                    {
			                    var isOwner = string.Equals(_currentUserRole, "Owner", StringComparison.OrdinalIgnoreCase);
			                    var isEdit = _newEvent.Id > 0;
			                    var isSelf = option.Email.Equals(_currentUserEmail, StringComparison.OrdinalIgnoreCase);
			                    var isOptionOwner = option.Role == 0;

			                    // Bedingungen für Deaktivierung
			                    bool disableItem =
				                    !isOwner && ( // Wenn NICHT Owner:
					                    isOptionOwner // ... Owner-Einträge immer sperren
					                    || (!isEdit && isSelf) // ... bei Erstellung darf sich Organisator selbst NICHT abwählen
				                    );

			                    <MudSelectItem Value="@option.Email" Disabled="@disableItem">
				                    @option.DisplayName
			                    </MudSelectItem>
		                    }

	                    </MudSelect>
                    </MudItem>

                    <!-- Ansprechpartner (mehrfach) -->
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string"
                                   Label="Ansprechpartner"
                                   SelectedValues="_newEvent.ContactPersons"
                                   SelectedValuesChanged="@(val => _newEvent.ContactPersons = val.ToList())"
                                   MultiSelection="true"
                                   Searchable="true">
                            @foreach (var option in ContactOptions)
                            {
                                <MudSelectItem Value="@option.Email">@option.DisplayName</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Startdatum" @bind-Date="_newEvent.StartDate" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Enddatum" @bind-Date="_newEvent.EndDate" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int" Label="Minimale Teilnehmer" @bind-Value="_newEvent.MinUsers" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int" Label="Maximale Teilnehmer" @bind-Value="_newEvent.MaxUsers" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Anmeldebeginn" @bind-Date="_newEvent.RegistrationStart" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Anmeldefrist" @bind-Date="_newEvent.RegistrationDeadline" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="EventStatus" Label="Status" @bind-Value="_newEvent.Status" FullWidth="true">
                            <MudSelectItem Value="EventStatus.Entwurf">Entwurf</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Offen">Offen</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Geschlossen">Geschlossen</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Abgesagt">Abgesagt</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Archiviert">Archiviert</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudDivider Class="my-4" />
                <div class="d-flex justify-end gap-3">
	                <MudButton Color="Color.Primary"
	                           Variant="Variant.Filled"
	                           OnClick="SaveEvent">
		                Speichern
	                </MudButton>

	                <MudButton Color="Color.Secondary"
	                           Variant="Variant.Filled"
	                           OnClick="CancelEdit">
		                Abbrechen
	                </MudButton>
                </div>
            </MudTabPanel>

            <!-- Teilnehmer (nur Edit) -->
            @if (_newEvent.Id > 0)
            {
                <MudTabPanel Text="Teilnehmer">
                    <MudText Typo="Typo.h5" Class="mb-3">Teilnehmer</MudText>
                    <MudDataGrid T="EventParticipantViewModel" Items="@Participants" Dense="true">
                        <Columns>
                            <PropertyColumn Property="x => x.FullName"    Title="Name" />
                            <PropertyColumn Property="x => x.Email"       Title="E-Mail" />
                            <PropertyColumn Property="x => x.RoleDisplay" Title="weitere Funktion" />
                            <TemplateColumn Title="" CellClass="text-end">
                                <CellTemplate Context="ctx">
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small"
                                               OnClick="@(() => RemoveParticipant(ctx.Item))">
                                        Entfernen
                                    </MudButton>
                                </CellTemplate>
                            </TemplateColumn>
                        </Columns>
                    </MudDataGrid>
                </MudTabPanel>
            }

            <!-- Prozess -->
            <MudTabPanel Text="Prozess">
	            @if (_newEvent.Id > 0)
	            {
		            <ProcessPanel @ref="_processPanel" EventId="_newEvent.Id" />
	            }
	            else
	            {
		            <MudText Typo="Typo.body2" Class="pa-6">
			            Speichere zuerst die Event-Details, um einen Prozess anzulegen.
		            </MudText>
	            }
            </MudTabPanel>

        </MudTabs>
    </MudPaper>
</div>

@code {
    [Parameter] public int? Id { get; set; }      // kommt aus Route

    private int _tabIndex = 0;

    private EventCreateViewModel _newEvent = new();
    private List<SelectItemDto> OrganizerOptions = new();   // DropDown-Daten
    private List<SelectItemDto> ContactOptions   = new();   // DropDown-Daten
    private List<EventParticipantViewModel> Participants = new();

    private string _currentUserEmail = string.Empty;
    private string _currentUserRole = string.Empty;

    private ProcessPanel? _processPanel;

    protected override async Task OnInitializedAsync()
    {
	    // Erst Rolle & E-Mail laden
	    _currentUserRole = await JwtClaimHelper.GetUserRoleAsync(AuthProvider);

	    var auth = await AuthProvider.GetAuthenticationStateAsync();
	    _currentUserEmail = auth.User
		    .FindFirst(System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Email)
		    ?.Value ?? "";

		// Danach die Member laden
	    await LoadMembers();
	    
	    // Bearbeiten-Modus
	    if (Id is > 0)
        {
            _newEvent.Id = Id.Value;
            await LoadEventForEdit(Id.Value);
            await LoadParticipants();
        }
		
        // Creator sicher als Manager eintragen
        // Nur wenn Organizer UND NEUER Event (nicht Edit)
        if (_newEvent.Id == 0 && _currentUserRole.Equals("Organizer", StringComparison.OrdinalIgnoreCase))
        {
	        if (!_newEvent.Managers.Contains(_currentUserEmail, StringComparer.OrdinalIgnoreCase))
		        _newEvent.Managers.Add(_currentUserEmail);
        }
    }

    // ---------- Daten laden ----------
    private async Task LoadMembers()
    {
        var token  = await SessionStorage.GetItemAsync<string>("authToken");
        var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

        var req = new HttpRequestMessage(HttpMethod.Get, $"api/organization/{domain}/members");
        req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var resp = await Http.SendAsync(req);
        if (!resp.IsSuccessStatusCode)
        {
            Snackbar.Add("Fehler beim Laden der Mitglieder.", Severity.Error);
            return;
        }

        var members = await resp.Content.ReadFromJsonAsync<List<OrganizationMemberDto>>() ?? new();
        OrganizerOptions = members
            .Where(m => m.Role == 0 || m.Role == 1)              // Owner / Organisator
            .Select(m => new SelectItemDto(m.Email, $"{m.Lastname} ({m.Email})", m.Role))
            .ToList();

        ContactOptions = members
            .Select(m => new SelectItemDto(m.Email, $"{m.Lastname} ({m.Email})"))
            .ToList();
    }

    private async Task LoadEventForEdit(int eventId)
    {
        var token = await SessionStorage.GetItemAsync<string>("authToken");

        var req = new HttpRequestMessage(HttpMethod.Get, $"api/event/{eventId}");
        req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var resp = await Http.SendAsync(req);
        if (!resp.IsSuccessStatusCode)
        {
            Snackbar.Add("Event konnte nicht geladen werden.", Severity.Error);
            Navigation.NavigateTo("/home");
            return;
        }

        var dto = await resp.Content.ReadFromJsonAsync<EventDto>();
        if (dto != null)
            _newEvent = EventCreateMapper.ToViewModel(dto);
    }

    private async Task LoadParticipants()
    {
        if (_newEvent.Id == 0) return; // nur im Edit-Modus

        var token = await SessionStorage.GetItemAsync<string>("authToken");
        var req   = new HttpRequestMessage(HttpMethod.Get, $"api/event/{_newEvent.Id}");
        req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var resp = await Http.SendAsync(req);
        if (!resp.IsSuccessStatusCode) return;

        var dto = await resp.Content.ReadFromJsonAsync<EventDto>();
        if (dto == null) return;

        Participants = dto.Participants
            .Select(p => new EventParticipantViewModel
            {
	            AccountId       = p.AccountId,
	            Email           = p.Email,
                FullName        = $"{p.Lastname}, {p.Firstname}",
                IsOrganizer     = dto.Organizers.Contains(p.Email),
                IsContactPerson = dto.ContactPersons.Contains(p.Email)
            })
            .ToList();
    }

    // ---------- UI-Interaktionen ----------
    private async Task RemoveParticipant(EventParticipantViewModel member)
    {
	    var ok = await EventApi.RemoveParticipantAsync(_newEvent.Id, member.AccountId);
	    if (ok)
	    {
		    Participants.Remove(member);
		    Snackbar.Add($"{member.FullName} wurde entfernt.", Severity.Info);
	    }
	    else
	    {
		    Snackbar.Add("Teilnehmer konnte nicht entfernt werden.", Severity.Error);
	    }
    }

    private async Task SaveEvent()
    {
	    /* ───────── 1. Plausibilitäts-Check ───────── */
	    if (_newEvent.Managers == null || !_newEvent.Managers.Any())
	    {
		    Snackbar.Add("Mindestens ein Verwalter muss ausgewählt sein.", Severity.Warning);
		    return;
	    }

	    /* Teilnehmer aus Grid → DTO-Liste */
	    _newEvent.Participants = Participants
		    .Select(p => new EventParticipantDto(0, "", "", p.Email))
		    .ToList();

	    var eventDto = EventCreateMapper.ToDto(_newEvent);

	    /* ───────── 2. Event speichern ───────── */
	    int? savedEventId;
	    if (_newEvent.Id > 0)                           // UPDATE
	    {
		    bool ok = await EventApi.UpdateEventAsync(eventDto);
		    if (!ok)
		    {
			    Snackbar.Add("Event konnte nicht gespeichert werden.", Severity.Error);
			    return;
		    }
		    savedEventId = _newEvent.Id;
	    }
	    else                                            // CREATE
	    {
		    savedEventId = await EventApi.CreateEventAsync(eventDto);
		    if (savedEventId is null)
		    {
			    Snackbar.Add("Event konnte nicht gespeichert werden.", Severity.Error);
			    return;
		    }
		    _newEvent.Id = savedEventId.Value;          // Id für Folgeaufrufe merken
	    }

	    /* ───────── 3. Prozess mit-speichern ───────── */
	    if (_processPanel is not null)
	    {
		    var processVm = _processPanel.GetCurrentProcess();   // Steps aus Panel

		    bool procOk = await ProcessApi.CreateOrUpdateAsync(savedEventId.Value, processVm);
		    if (!procOk)
			    Snackbar.Add("Prozess konnte nicht gespeichert werden.", Severity.Warning);
	    }

	    /* ───────── 4. Fertig ───────── */
	    Snackbar.Add("Event gespeichert!", Severity.Success);
	    Navigation.NavigateTo("/home");
    }


    private void CancelEdit()
    {
        if (_newEvent.Id > 0)          // Edit-Modus
            Navigation.NavigateTo($"/EventDetails/{_newEvent.Id}");
        else                           // Neu-Modus
            Navigation.NavigateTo("/home");
    }

    // ---------- Hilfs-Typen ----------
    public record SelectItemDto(string Email, string DisplayName, int Role = 1); // 0=Owner, 1=Organisator

    public class EventParticipantViewModel
    {
        public int AccountId { get; set; }
        public string Email { get; set; } = string.Empty;
        public string FullName { get; set; } = string.Empty;
        public bool IsOrganizer { get; set; }
        public bool IsContactPerson { get; set; }
        public string RoleDisplay =>
            IsOrganizer
                ? "(Verwalter)"
                : IsContactPerson
                    ? "(Ansprechpartner)"
                    : "";
    }
}