@page "/EventErstellen"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using ET.Shared.DTOs
@using ET.Shared.DTOs.Enums
@using ET_Frontend.Helpers
@using System.Net.Http.Headers
@using Blazored.SessionStorage
@using ET_Frontend.Mapping
@using ET_Frontend.Models.Event
@using ET_Frontend.Services.ApiClients

@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISessionStorageService SessionStorage
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthProvider
@inject IEventApi EventApi
@inject ISnackbar Snackbar

<PageTitle>Event erstellen</PageTitle>

<div class="flex-md-column align-content-between justify-content-center w-100 h-100">
    <MudPaper Class="mt-4 p-6 rounded-lg shadow-md">
        <MudTabs Rounded="true" Border="true" @bind-ActivePanelIndex="_tabIndex" PanelClass="pa-4">

            <!-- Tab: Details -->
            <MudTabPanel Text="Details">
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Eventname" @bind-Value="_newEvent.Name" FullWidth="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
	                    <MudTextField Label="Eventtyp" @bind-Value="_newEvent.EventType" FullWidth="true" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
	                    <MudTextField Label="Veranstaltungsort" @bind-Value="_newEvent.Location" FullWidth="true" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Beschreibung" @bind-Value="_newEvent.Description" Lines="3" FullWidth="true" />
                    </MudItem>

                    <!-- Verwalter (mehrfach) -->
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string"
                                   Label="Verwalter"
                                   SelectedValues="_newEvent.Managers"
                                   SelectedValuesChanged="@(val => _newEvent.Managers = val.ToList())"
                                   MultiSelection="true"
                                   Searchable="true">
                            @foreach (var member in GetOrganizers())
                            {
                                <MudSelectItem Value="@member.Email">@member.Lastname (@member.Email)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- Ansprechpartner (mehrfach) -->
                    <MudItem xs="12" sm="6">
                        <MudSelect T="string"
                                   Label="Ansprechpartner"
                                   SelectedValues="_newEvent.ContactPersons"
                                   SelectedValuesChanged="@(val => _newEvent.ContactPersons = val.ToList())"
                                   MultiSelection="true"
                                   Searchable="true">
                            @foreach (var member in OrgMembers)
                            {
                                <MudSelectItem Value="@member.Email">@member.Lastname (@member.Email)</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Startdatum" @bind-Date="_newEvent.StartDate" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Enddatum" @bind-Date="_newEvent.EndDate" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int" Label="Minimale Teilnehmer" @bind-Value="_newEvent.MinUsers" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudNumericField T="int" Label="Maximale Teilnehmer" @bind-Value="_newEvent.MaxUsers" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Anmeldebeginn" @bind-Date="_newEvent.RegistrationStart" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudDatePicker Label="Anmeldefrist" @bind-Date="_newEvent.RegistrationDeadline" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="EventStatus" Label="Status" @bind-Value="_newEvent.Status" FullWidth="true">
                            <MudSelectItem Value="EventStatus.Entwurf">Entwurf</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Offen">Offen</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Geschlossen">Geschlossen</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Abgesagt">Abgesagt</MudSelectItem>
                            <MudSelectItem Value="EventStatus.Archiviert">Archiviert</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                </MudGrid>

                <MudDivider Class="my-4" />
                <div class="d-flex justify-end gap-3">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="SaveEvent">Speichern</MudButton>
                </div>
            </MudTabPanel>

            <!-- Teilnehmer -->
            <MudTabPanel Text="Teilnehmer">
                <MudText Typo="Typo.h5" Class="mb-3">Teilnehmer</MudText>
                <MudDataGrid T="OrganizationMemberDto" Items="@OrgMembers" Dense="true">
                    <Columns>
                        <PropertyColumn Property="x => x.Lastname" Title="Nachname" />
                        <PropertyColumn Property="x => x.Email" Title="E-Mail" />
                        <PropertyColumn Property="x => x.Role" Title="Rolle" />
                        <TemplateColumn Title="" CellClass="text-end">
                            <CellTemplate Context="ctx">
                                <MudButton Variant="Variant.Filled" Color="Color.Error" Size="Size.Small" OnClick="@(() => RemoveParticipant(ctx.Item))">
                                    Entfernen
                                </MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                </MudDataGrid>
            </MudTabPanel>

            <!-- Prozess -->
            <MudTabPanel Text="Prozess">
                <MudText Typo="Typo.body1" Class="mb-4">TODO</MudText>
                <MudSpacer />
                <MudStack Row Justify="Justify.FlexEnd" Class="mt-6">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveEvent">Speichern</MudButton>
                </MudStack>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
</div>

@code {
    private int _tabIndex = 0;
    private EventCreateViewModel _newEvent = new();
    private List<OrganizationMemberDto> OrgMembers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadMembers();
    }

    private async Task LoadMembers()
    {
        var token = await SessionStorage.GetItemAsync<string>("authToken");
        var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

        var request = new HttpRequestMessage(HttpMethod.Get, $"api/organization/{domain}/members");
        request.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

        var response = await Http.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            OrgMembers = await response.Content.ReadFromJsonAsync<List<OrganizationMemberDto>>() ?? new();
        }
        else
        {
            Snackbar.Add("Fehler beim Laden der Mitglieder.", Severity.Error);
        }
    }

    private IEnumerable<OrganizationMemberDto> GetOrganizers()
    {
        // Nur Owner & Organisatoren als Verwalter
        return OrgMembers.Where(m => m.Role == 0 || m.Role == 1);
    }

    private void RemoveParticipant(OrganizationMemberDto member)
    {
        OrgMembers.Remove(member);
    }

    private async Task SaveEvent()
    {
        var dto = EventCreateMapper.ToDto(_newEvent);
        var success = await EventApi.CreateEventAsync(dto);

        if (success)
        {
            Snackbar.Add("Event erfolgreich erstellt!", Severity.Success);
            Navigation.NavigateTo("/home");
        }
        else
        {
            Snackbar.Add("Fehler beim Erstellen des Events.", Severity.Error);
        }
    }
}