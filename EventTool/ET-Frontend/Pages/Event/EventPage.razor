@page "/EventDetails/{ID:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using ET.Shared.DTOs
@using ET_Frontend.Mapping
@using ET_Frontend.Models.Event
@using ET_Frontend.Services.ApiClients

@inject IEventApi EventApi
@inject NavigationManager Navigation

<PageTitle>Event Details</PageTitle>

<div class="flex-md-column w-100 h-100 p-4">
    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Size="Size.Large" Class="ma-auto" />
    }
    else if (_loadError)
    {
        <MudAlert Severity="Severity.Error">
            Event konnte nicht geladen werden.
            <MudButton Class="ms-4" Variant="Variant.Outlined" OnClick="NavigateHome">Zurück</MudButton>
        </MudAlert>
    }
    else
    {
        <MudPaper Class="pa-6 rounded-lg shadow-md">
            <MudText Typo="Typo.h4">@_event.Name</MudText>

            <MudGrid Class="mt-4">
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Eventtyp" Value="@_event.EventType" ReadOnly />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Beschreibung" Value="@_event.Description" Lines="3" ReadOnly FullWidth />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField Label="Ansprechpartner"
                                  Value="@(string.Join(", ", _event.ContactPersons))" ReadOnly />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Startdatum" Date="@_event.StartDate" ReadOnly />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Enddatum" Date="@_event.EndDate" ReadOnly />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudNumericField T="int" Label="Min. Teilnehmer" Value="@_event.MinUsers" ReadOnly />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField T="int" Label="Max. Teilnehmer" Value="@_event.MaxUsers" ReadOnly />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Anmelde­beginn" Date="@_event.RegistrationStart" ReadOnly />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Anmelde­frist" Date="@_event.RegistrationDeadline" ReadOnly />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField Label="Status" Value="@_event.Status.ToString()" ReadOnly />
                </MudItem>
            </MudGrid>

            <MudButton Class="mt-4" Variant="Variant.Outlined" OnClick="NavigateHome">
                Zurück
            </MudButton>
        </MudPaper>
    }
</div>

@code {
    [Parameter] public int ID { get; set; }

    private bool _loading = true;
    private bool _loadError = false;

    private EventCreateViewModel _event = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var dto = await EventApi.GetEventAsync(ID);
            if (dto is null)
            {
                _loadError = true;
                return;
            }

            _event = EventCreateMapper.ToViewModel(dto);
        }
        catch
        {
            _loadError = true;
        }
        finally
        {
            _loading = false;
        }
    }

    private void NavigateHome() => Navigation.NavigateTo("/home");
}
