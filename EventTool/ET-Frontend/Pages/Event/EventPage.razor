@page "/EventDetails/{ID:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Authorization
@using System.Net.Http.Headers
@using Blazored.SessionStorage
@using ET.Shared.DTOs
@using MudBlazor

@inject HttpClient Http
@inject ISessionStorageService SessionStorage
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<PageTitle>Event Details</PageTitle>

<div class="flex-md-column w-100 h-100 p-4">
    @if (_loading)
    {
        <MudProgressCircular Indeterminate="true" Size="Size.Large" Class="ma-auto" />
    }
    else if (_loadError)
    {
        <MudAlert Severity="Severity.Error">
            Event konnte nicht geladen werden.
            <MudButton Class="ms-4" Variant="Variant.Outlined" OnClick="NavigateHome">Zurück</MudButton>
        </MudAlert>
    }
    else
    {
        <MudPaper Class="pa-6 rounded-lg shadow-md">
            <MudText Typo="Typo.h4">@_event.Name</MudText>

            <MudGrid Class="mt-4">
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Eventtyp" Value="@_event.EventType" ReadOnly />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Beschreibung" Value="@_event.Description" Lines="3" ReadOnly FullWidth />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField Label="Ansprechpartner" Value="@_event.ContactPerson" ReadOnly />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Startdatum" Date="@_event.StartDate" ReadOnly />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Enddatum" Date="@_event.EndDate" ReadOnly />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudNumericField T="int" Label="Min. Teilnehmer" Value="@_event.MinUsers" ReadOnly />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField T="int" Label="Max. Teilnehmer" Value="@_event.MaxUsers" ReadOnly />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Anmelde­beginn" Date="@_event.RegistrationStart" ReadOnly />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Anmelde­frist" Date="@_event.RegistrationDeadline" ReadOnly />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField Label="Status" Value="@_event.Status.ToString()" ReadOnly />
                </MudItem>
            </MudGrid>

            <MudButton Class="mt-4" Variant="Variant.Outlined" OnClick="NavigateHome">
                Zurück
            </MudButton>
        </MudPaper>
    }
</div>

@code {
    [Parameter] public int ID { get; set; }

    private bool _loading = true;
    private bool _loadError = false;

    private MyEvent _event = new();

    /* ---------- Lifecycle ---------- */
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var token = await SessionStorage.GetItemAsync<string>("authToken");
            var req = new HttpRequestMessage(HttpMethod.Get, $"api/event/{ID}");
            req.Headers.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var resp = await Http.SendAsync(req);
            if (!resp.IsSuccessStatusCode)
            {
                _loadError = true;
                return;
            }

            var dto = await resp.Content.ReadFromJsonAsync<EventDto>();
            if (dto is null)
            {
                _loadError = true;
                return;
            }

            MapDto(dto);
        }
        catch
        {
            _loadError = true;
        }
        finally
        {
            _loading = false;
        }
    }

    /* ---------- Mapping ---------- */
    private void MapDto(EventDto dto)
    {
        _event = new MyEvent
        {
            ID = ID,
            Name = dto.Name,
            EventType = dto.IsBlueprint ? "Vorlage" : "Event",
            Description = dto.Description,
            StartDate = dto.StartDate.ToDateTime(TimeOnly.MinValue),
            EndDate = dto.EndDate.ToDateTime(TimeOnly.MinValue),
            MinUsers = dto.MinParticipants,
            MaxUsers = dto.MaxParticipants,
            RegistrationStart = dto.RegistrationStart.ToDateTime(TimeOnly.MinValue),
            RegistrationDeadline = dto.RegistrationEnd.ToDateTime(TimeOnly.MinValue),
            ContactPerson = dto.ContactPersons?.FirstOrDefault() ?? "-",
            RegisteredUsers = 0,      // Teilnehmerliste ist im DTO nicht enthalten
            Status = dto.IsBlueprint ? EventStatus.Entwurf : EventStatus.Offen
        };
    }

    /* ---------- Helpers ---------- */
    private void NavigateHome() => Navigation.NavigateTo("/home");

    /* ---------- Models ---------- */
    public enum EventStatus { Entwurf, Offen, Geschlossen, Abgesagt, Archiviert }

    public class MyEvent
    {
        public int ID { get; set; }
        public string Name { get; set; } = "";
        public string? EventType { get; set; }
        public string? Description { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public int MinUsers { get; set; }
        public int MaxUsers { get; set; }
        public DateTime? RegistrationStart { get; set; }
        public DateTime? RegistrationDeadline { get; set; }
        public string? ContactPerson { get; set; }
        public EventStatus Status { get; set; } = EventStatus.Entwurf;
        public int RegisteredUsers { get; set; }
    }
}
