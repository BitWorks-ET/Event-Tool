@page "/EventBearbeiten/{ID:int}"
@inject NavigationManager Navigation
@using MudBlazor
@using System.Linq

<PageTitle>Event bearbeiten</PageTitle>

<MudPaper Class="mt-4 p-6 rounded-lg shadow-md">
    <MudTabs Rounded="true" Border="true" @bind-ActivePanelIndex="_tabIndex" PanelClass="pa-4">
        <MudTabPanel Text="Details">
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Eventname" @bind-Value="_event.Name" FullWidth="true" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTextField Label="Eventtyp" @bind-Value="_event.EventType" FullWidth="true" />
                </MudItem>

                <MudItem xs="12">
                    <MudTextField Label="Beschreibung" @bind-Value="_event.Description" Lines="3" FullWidth="true" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudTextField Label="Ansprechpartner" @bind-Value="_event.ContactPerson" FullWidth="true" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Startdatum" @bind-Date="_event.StartDate" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Enddatum" @bind-Date="_event.EndDate" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudNumericField T="int" Label="Minimale Teilnehmer" @bind-Value="_event.MinUsers" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudNumericField T="int" Label="Maximale Teilnehmer" @bind-Value="_event.MaxUsers" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Anmeldebeginn" @bind-Date="_event.RegistrationStart" />
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudDatePicker Label="Anmeldefrist" @bind-Date="_event.RegistrationDeadline" />
                </MudItem>

                <MudItem xs="12" sm="6">
                    <MudSelect T="EventStatus" Label="Status" @bind-Value="_event.Status" FullWidth="true">
                        <MudSelectItem Value="EventStatus.Offen">Offen</MudSelectItem>
                        <MudSelectItem Value="EventStatus.Geschlossen">Geschlossen</MudSelectItem>
                        <MudSelectItem Value="EventStatus.Abgesagt">Abgesagt</MudSelectItem>
                    </MudSelect>
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-4" />

            <div class="d-flex justify-end gap-3">
                <MudButton Color="Color.Default" Variant="Variant.Outlined" OnClick="AlsEntwurfSpeichern">Als Entwurf speichern</MudButton>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Speichern">Speichern</MudButton>
            </div>
        </MudTabPanel>

        <MudTabPanel Text="Teilnehmer">
            <MudText Typo="Typo.h5" Class="mb-3">Teilnehmer</MudText>

            <MudDataGrid T="Teilnehmer" Items="@_teilnehmerListe" Dense="true">
                <Columns>
                    <PropertyColumn Property="x => x.LastName" Title="Nachname" />
                    <PropertyColumn Property="x => x.Email" Title="E-Mail" />
                    <TemplateColumn Title="" CellClass="text-end">
                        <CellTemplate Context="ctx">
                            <MudButton Variant="Variant.Filled"
                                       Color="Color.Error"
                                       Size="Size.Small"
                                       OnClick="@(() => EntferneTeilnehmer(ctx.Item))">
                                Entfernen
                            </MudButton>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        </MudTabPanel>
    </MudTabs>
</MudPaper>

@code {
    [Parameter] public int ID { get; set; }
    private int _tabIndex = 0;

    public enum EventStatus
    {
        Entwurf,
        Offen,
        Geschlossen,
        Abgesagt,
        Archiviert
    }

    public class MyEvent
    {
        public int ID { get; set; }
        public string Name { get; set; }
        public string EventType { get; set; }
        public string Description { get; set; }
        public DateTime? StartDate { get; set; }
        public DateTime? EndDate { get; set; }
        public int MinUsers { get; set; }
        public int MaxUsers { get; set; }
        public DateTime? RegistrationStart { get; set; }
        public DateTime? RegistrationDeadline { get; set; }
        public string ContactPerson { get; set; }
        public EventStatus Status { get; set; } = EventStatus.Entwurf;
        public int RegisteredUsers { get; set; }
        public bool CanBeEdited { get; set; }
    }

    public class Teilnehmer
    {
        public string LastName { get; set; }
        public string Email { get; set; }
    }

    private MyEvent _event = new MyEvent();

    private List<Teilnehmer> _teilnehmerListe = new()
    {
        new Teilnehmer { LastName = "Reich", Email = "reich@example.com" },
        new Teilnehmer { LastName = "Müller", Email = "mueller@example.com" },
        new Teilnehmer { LastName = "Schmidt", Email = "schmidt@example.com" }
    };

    private void EntferneTeilnehmer(Teilnehmer t)
    {
        _teilnehmerListe.Remove(t);
    }

    protected override void OnInitialized()
    {
        var alleEvents = new List<MyEvent>
        {
            new MyEvent
            {
                ID = 1,
                Name = "Grillfest",
                Description = "lecker!",
                RegisteredUsers = 5,
                MaxUsers = 10
            },
            new MyEvent
            {
                ID = 2,
                Name = "Sommerfest",
                Description = "heiß!",
                RegisteredUsers = 40,
                MaxUsers = 150
            }
        };

        _event = alleEvents.FirstOrDefault(e => e.ID == ID) ?? new MyEvent { Name = "Nicht gefunden" };
    }

    private void Speichern()
    {
        Console.WriteLine($"[SPEICHERN] {_event.Name}, Status: {_event.Status}");
        Navigation.NavigateTo("/");
    }

    private void AlsEntwurfSpeichern()
    {
        _event.Status = EventStatus.Entwurf;
        Console.WriteLine($"[ALS ENTWURF] {_event.Name}, Status: {_event.Status}");
        Navigation.NavigateTo("/");
    }
}
