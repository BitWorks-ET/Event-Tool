@page "/Organisationsdaten"

@using System.ComponentModel.DataAnnotations
@using ET.Shared.DTOs
@using MudBlazor


<PageTitle>Organisationsdaten bearbeiten</PageTitle>

<div class="flex-md-column w-100 h-100 p-4">
    <MudText Typo="Typo.h4">Organisationsdaten bearbeiten</MudText>
    <MudText Typo="Typo.body1">Hier sind Sie in der Lage, die Daten Ihrer Organisation zu bearbeiten.</MudText>
    <MudText Class="fw-bold w-75 alert-danger" Typo="Typo.body1">
        Hinweis: Das ändern der Domain führt zur Änderung aller E-Mails der
        Mitarbeitenden auf die neue Domain. Solch eine Änderung sollte mit allen koordiniert und mit Bedacht durchgeführt werden!
    </MudText>
    <MudForm Model="@orgaModel" @ref="_editForm">
        <div class="d-flex w-100">
            <div class="flex-md-column w-75">
                <MudTextField @bind-Value="orgaModel.orgaName"
                              Label="Organisationsname"
                              For="@(() => orgaModel.orgaName)"
                              Required="true"
                              RequiredError="Name ist erforderlich."
                              Variant="Variant.Filled"
                              Margin="Margin.Dense"
                              Class="mb-3" />

                <MudTextField @bind-Value="orgaModel.description"
                              Label="Beschreibung"
                              Lines="3"
                              For="@(() => orgaModel.description)"
                              Variant="Variant.Filled"
                              Margin="Margin.Dense"
                              Class="mb-3" />

                <MudTextField @bind-Value="orgaModel.domain"
                              Label="Domain"
                              For="@(() => orgaModel.domain)"
                              Required="true"
                              RequiredError="Domain ist erforderlich."
                              Variant="Variant.Filled"
                              Margin="Margin.Dense"
                              Class="mb-3" />
            </div>
            <div class="d-flex flex-column align-items-center w-25 h-100">
                <img class="rounded-3 w-50 h-50 mb-4" src="@orgaModel.orgaPicBase64" alt="Logo Organisation" /> <!--TODO Füllbild fürs erste-->
                <MudFileUpload Class="h-25" T="IBrowserFile" FilesChanged="@(async (file) => await UpdatePicPreview(file))">
                    <ActivatorContent>
                        <MudFab Color="Color.Primary"
                                StartIcon="@Icons.Material.Filled.Image"
                                Label="Organisations-Bild hochladen" />
                    </ActivatorContent>
                </MudFileUpload>
            </div>
        </div>


        <div class="d-flex w-100 align-content-center justify-content-between">
            <MudButton OnClick="ResetChanges"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-2">
                Änderungen zurücksetzen
            </MudButton>

            <div class="d-flex w-100 align-content-center justify-content-center">
                <MudPopover OverflowBehavior="OverflowBehavior.FlipNever" Open="@popupState" AnchorOrigin="Origin.CenterCenter" TransformOrigin="Origin.CenterCenter" Class="pa-4 flex-column">
                    <MudText Typo="Typo.body2" Class="px-4 py-1">@popupText</MudText>
                    <MudButton Class="float-end" OnClick="@(() => popupState = false)">OK</MudButton>
                </MudPopover>
            </div>

            <MudButton OnClick="@(() => ValidateForm(orgaModel.orgaPic))"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Class="mt-2">
                Änderungen Speichern
            </MudButton>
        </div>

    </MudForm>
</div>

@code {
    [Inject] private HttpClient Http { get; set; }
    [Inject] private NavigationManager Navigation { get; set; }
    private Boolean popupState = false;
    private string popupText = "Wir tun mal so, als wäre das ein Easter Egg. Glückwunsch!"; //Fallback falls es wer schafft, das Popup ohne Button auszulösen? XD

    private MudForm _editForm;
    private OrgaChangeModel orgaModel = new();

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(orgaModel.orgaPicBase64))
        {
            var imageBytes = await Http.GetByteArrayAsync($"{Navigation.BaseUri}images/BitWorksSimpel-Gro.png");
            orgaModel.orgaPicBase64 = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";
        }
    }

    private async Task ValidateForm(IBrowserFile file)
    {
        await _editForm.Validate();
        if (_editForm.IsValid)
        {
            await ChangeOrgaData(file);
        }
        else
        {
            popupText = "Die eingegeben Daten sind nicht valide!";
            popupState = true;
        }
    }

    private async Task ChangeOrgaData(IBrowserFile file)
    {
        if (file != null)
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // sorgt für ein 10 MB Limit für die Datei
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);

            var base64 = Convert.ToBase64String(memoryStream.ToArray());
        }
        else //falls kein neues Bild eingefügt wurde, das alte einfügen fürs Dto
        {
            //TODO hier laden der alten Datei bzw sollte ja schon da sein
        }

        //OrganizationDto orgaDTO = new OrganizationDto(orgaModel.orgaName, orgaModel.description, orgaModel.domain, base64);

        //TODO upload zur Datenbank

        // Console.WriteLine($"Registrierung mit DTO: {userRegDTO}");

        if (true)                                       //TODO hier Variable die sagt ob erfolgreich geladen oder nicht
        {
            popupText = "Änderungen gespeichert";
            popupState = true;
        }
        else
        {
            popupText = "Fehler beim Speichern der Daten";
            popupState = true;
        }

    }

    private async Task ResetChanges()
    {
        //TODO funktion um Daten aus der Datenbank zu Laden, Idee ist das Bearbeitbare Felder die gespeicherten Infos haben und bei BHutton diese wiederhergestellt werden
        var imageBytes = await Http.GetByteArrayAsync("images/BitWorksSimpel-Gro.png");
        orgaModel.orgaPicBase64 = $"data:image/png;base64,{Convert.ToBase64String(imageBytes)}";

        if (true)                                       //TODO hier Variable die sagt ob erfolgreich geladen oder nicht
        {
            popupText = "Änderungen verworfen";
            popupState = true;
        }
        else
        {
            popupText = "Fehler beim Laden der Daten";
            popupState = true;
        }
    }

    private async Task UpdatePicPreview(IBrowserFile file)
    {
        orgaModel.orgaPic = file;

        if (!file.ContentType.StartsWith("image/"))
        {
            popupText = "Bitte laden Sie nur Bilddateien hoch.";
            popupState = true;
            return;
        }
        try
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // sorgt für ein 10 MB Limit für die Datei
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var base64 = Convert.ToBase64String(memoryStream.ToArray());
            orgaModel.orgaPicBase64 = $"data:{file.ContentType};base64,{(base64)}";

        }catch(IOException e)
        {
            popupText = "Bitte laden Sie nur Bilddateien hoch, die größer als 10MB sind.";
            popupState = true;
            return;
        }
    }

    public class OrgaChangeModel
    {
        [Required(ErrorMessage = "Organisationsname ist erforderlich.")]
        public string orgaName { get; set; }

        public string description { get; set; }

        [Required(ErrorMessage = "Domain ist erforderlich.")]
        public string domain { get; set; }

        public IBrowserFile orgaPic { get; set; }

        public string orgaPicBase64 { get; set; }
    }
}