@page "/Organisationsdaten"
@attribute [Authorize]
@using Microsoft.AspNetCore.Authorization

@using ET_Frontend.Models
@using ET_Frontend.Helpers
@using ET_Frontend.Services.Authentication
@using ET.Shared.DTOs
@using Microsoft.AspNetCore.Components.Authorization

@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject ISnackbar Snackbar

<PageTitle>Organisationsdaten bearbeiten</PageTitle>

<div class="flex-md-column w-100 h-100 p-4">
	<MudText Typo="Typo.h4">Organisationsdaten bearbeiten</MudText>
	<MudText Typo="Typo.body1">Hier sind Sie in der Lage, die Daten Ihrer Organisation zu bearbeiten.</MudText>
	<MudText Class="fw-bold w-75 alert-danger" Typo="Typo.body1">
		Das Ändern der Domain führt automatisch zur Anpassung aller E-Mail-Adressen Ihrer Mitarbeitenden auf die neue Domain. Diese Änderung wirkt sich auf alle Benutzer aus und sollte daher gut überlegt und im Vorfeld mit dem gesamten Team abgestimmt werden.
		Achtung: Nach der Änderung der Domain werden Sie automatisch abgemeldet und müssen sich mit der neuen E-Mail-Adresse erneut anmelden.
	</MudText>
	<MudText Typo="Typo.h5" Class="mt-4">Aktive Organisation: @orgaModel.orgaName</MudText>
	<MudForm Model="@orgaModel" @ref="_editForm">
		<div class="d-flex w-100">
			<div class="flex-md-column w-75">
				<MudTextField @bind-Value="orgaModel.orgaName"
							  Label="Organisationsname"
							  For="@(() => orgaModel.orgaName)"
							  Required="true"
							  RequiredError="Name ist erforderlich."
							  Variant="Variant.Filled"
							  Margin="Margin.Dense"
							  Class="mb-3" />

				<MudTextField @bind-Value="orgaModel.description"
							  Label="Beschreibung"
							  Lines="3"
							  For="@(() => orgaModel.description)"
							  Variant="Variant.Filled"
							  Margin="Margin.Dense"
							  Class="mb-3" />

				<MudTextField @bind-Value="orgaModel.domain"
							  Label="Domain"
							  For="@(() => orgaModel.domain)"
							  Required="true"
							  RequiredError="Domain ist erforderlich."
							  Variant="Variant.Filled"
							  Margin="Margin.Dense"
							  Class="mb-3" />
			</div>
			<div class="d-flex flex-column align-items-center w-25 h-100">
				<img class="rounded-3 w-50 h-50 mb-4" src="@orgaModel.orgaPicBase64" alt="Logo Organisation" /> <!--TODO Füllbild fürs erste-->
				<MudFileUpload Class="h-25" T="IBrowserFile" FilesChanged="@(async (file) => await UpdatePicPreview(file))">
					<ActivatorContent>
						<MudFab Color="Color.Primary"
								StartIcon="@Icons.Material.Filled.Image"
								Label="Organisations-Bild hochladen" />
					</ActivatorContent>
				</MudFileUpload>
			</div>
		</div>


		<div class="d-flex w-100 align-content-center justify-content-between">
			<MudButton OnClick="ResetChanges"
					   Variant="Variant.Filled"
					   Color="Color.Primary"
					   Class="mt-2">
				Änderungen zurücksetzen
			</MudButton>


			<MudButton OnClick="@(() => ValidateForm(orgaModel.orgaPic))"
					   Variant="Variant.Filled"
					   Color="Color.Primary"
					   Class="mt-2">
				Änderungen Speichern
			</MudButton>
		</div>

	</MudForm>
</div>

@code {

	private MudForm _editForm;
	private string originalDomain;
	private OrgaChangeModel orgaModel = new();

	// Lädt die Organisationsdaten des aktuell eingeloggten Benutzers anhand des Domain-Claims.
	// Zeigt ein Standardbild, falls kein Logo vorhanden ist.
	protected override async Task OnInitializedAsync()
	{
		var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);

		var request = new HttpRequestMessage(HttpMethod.Get, $"api/organization/{domain}");
		request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", await SessionStorage.GetItemAsync<string>("authToken"));

		var response = await Http.SendAsync(request);
		if (response.IsSuccessStatusCode)
		{
			var dto = await response.Content.ReadFromJsonAsync<OrganizationDto>();
			if (dto != null)
			{
				orgaModel = DtoMapper.FromDto(dto);
				originalDomain = orgaModel.domain; // Merken der ursprünglichen Domain
			}
		}
		else
		{
			Snackbar.Add("Fehler beim Laden der Organisationsdaten", Severity.Error);
		}
		StateHasChanged();
	}

	// Validiert die Eingaben im Formular.
	// Führt bei Erfolg die Speicherung durch, sonst Popup.
	private async Task ValidateForm(IBrowserFile file)
	{
		await _editForm.Validate();
		if (_editForm.IsValid)
		{
			await ChangeOrgaData(file);
		}
		else
		{
			Snackbar.Add("Die eingegeben Daten sind nicht valide!", Severity.Error);
		}
	}

	// Speichert die geänderten Organisationsdaten über die API.
	// Bild wird optional in Base64 übertragen.
	private async Task ChangeOrgaData(IBrowserFile file)
	{
		string base64;

		if (file != null)
		{
			using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
			using var ms = new MemoryStream();
			await stream.CopyToAsync(ms);
			base64 = Convert.ToBase64String(ms.ToArray());
			orgaModel.orgaPicBase64 = $"data:{file.ContentType};base64,{base64}";
		}

		var dto = DtoMapper.ToDto(orgaModel);
		var response = await Http.PutAsJsonAsync($"api/organization/{orgaModel.OrganizationId}", dto);

		if (response.IsSuccessStatusCode)
		{
			Snackbar.Add("Änderungen gespeichert", Severity.Success);

			if (orgaModel.domain != originalDomain)
			{
				await SessionStorage.RemoveItemAsync("authToken");

				if (AuthProvider is JwtAuthenticationStateProvider jwtProvider)
					jwtProvider.NotifyAuthenticationStateChanged();

				Navigation.NavigateTo("/login", forceLoad: true);
				return;
			}
		}
		else
		{
			Snackbar.Add("Fehler beim Speichern", Severity.Error);
		}
	}


	// Lädt die gespeicherten Originaldaten erneut und setzt das Formular zurück.
	private async Task ResetChanges()
	{
		var domain = await JwtClaimHelper.GetUserDomainAsync(AuthProvider);
		var dto = await Http.GetFromJsonAsync<OrganizationDto>($"api/organization/{domain}");
		orgaModel = dto != null ? DtoMapper.FromDto(dto) : new();
		Snackbar.Add("Änderungen verworfen", Severity.Success);
	}

	// Zeigt eine Bildvorschau an, wenn eine neue Datei hochgeladen wurde.
	private async Task UpdatePicPreview(IBrowserFile file)
	{
		orgaModel.orgaPic = file;

		if (!file.ContentType.StartsWith("image/"))
		{
			Snackbar.Add("Bitte nur Bilddateien hochladen.", Severity.Error);
			return;
		}

		using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // sorgt für ein 10 MB Limit für die Datei
		using var ms = new MemoryStream();
		await stream.CopyToAsync(ms);
		var base64 = Convert.ToBase64String(ms.ToArray());

		orgaModel.orgaPicBase64 = $"data:{file.ContentType};base64,{base64}";
	}
}